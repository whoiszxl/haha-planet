-- liquibase formatted sql

-- changeset whoiszxl:1
-- comment 星球模块: 初始化模块表数据

-- 插入星球分类数据
INSERT INTO `pla_planet_category` (`id`, `category_name`, `icon_url`, `parent_id`, `level`, `sort`, `created_by`) VALUES
(1, '编程开发', 'icons/planet_categorys/1.svg', 0, 1, 100, 1),
(2, '游戏开发', 'icons/planet_categorys/2.svg', 0, 1, 90, 1),
(3, '人工智能', 'icons/planet_categorys/3.svg', 0, 1, 80, 1),
(4, '摄影摄像', 'icons/planet_categorys/4.svg', 0, 1, 70, 1),
(5, '互联网', 'icons/planet_categorys/5.svg', 0, 1, 60, 1),
(6, '艺术设计', 'icons/planet_categorys/6.svg', 0, 1, 50, 1),
(7, '赚钱副业', 'icons/planet_categorys/7.svg', 0, 1, 40, 1),
(8, '信息安全', 'icons/planet_categorys/8.svg', 0, 1, 30, 1),
(9, '健康运动', 'icons/planet_categorys/9.svg', 0, 1, 30, 1),
(10, '语言学习', 'icons/planet_categorys/10.svg', 0, 1, 30, 1),
(11, '音乐创作', 'icons/planet_categorys/11.svg', 0, 1, 30, 1),
(12, '旅游探险', 'icons/planet_categorys/12.svg', 0, 1, 30, 1),
(13, '科普教育', 'icons/planet_categorys/13.svg', 0, 1, 30, 1),
(14, '心理成长', 'icons/planet_categorys/14.svg', 0, 1, 30, 1),
(15, '文学文化', 'icons/planet_categorys/15.svg', 0, 1, 30, 1),
(16, '营销销售', 'icons/planet_categorys/16.svg', 0, 1, 30, 1),
(17, '跨境电商', 'icons/planet_categorys/17.svg', 0, 1, 30, 1),
(18, '电子竞技', 'icons/planet_categorys/18.svg', 0, 1, 30, 1),
(19, '行业交流', 'icons/planet_categorys/19.svg', 0, 1, 30, 1),
(20, '读书交流', 'icons/planet_categorys/20.svg', 0, 1, 30, 1);

-- 插入星球标签数据
INSERT INTO `pla_planet_tag` (`id`, `name`, `color`, `use_count`, `category_id`, `created_by`) VALUES
(1, 'Java', '#f50', 15, 1, 1),
(2, 'Spring Boot', '#2db7f5', 12, 1, 1),
(3, 'Python', '#87d068', 10, 1, 1),
(4, 'Vue.js', '#108ee9', 8, 1, 1),
(5, 'React', '#f56a00', 6, 1, 1),
(6, '产品经理', '#722ed1', 5, 2, 1),
(7, 'UI设计', '#eb2f96', 4, 2, 1),
(8, '数据分析', '#52c41a', 3, 3, 1),
(9, '职场规划', '#1890ff', 2, 4, 1),
(10, '股票投资', '#fa8c16', 1, 5, 1);

-- 插入星球数据
INSERT INTO `pla_planet` (`id`, `planet_code`, `name`, `description`, `avatar`, `cover_image`, `owner_id`, `category_id`, `tags`, `price_type`, `price`, `original_price`, `discount_price`, `join_type`, `is_public`, `max_members`, `join_question`, `auto_approve`, `allow_member_post`, `post_need_approve`, `allow_anonymous`, `watermark_enabled`, `member_count`, `post_count`, `view_count`, `like_count`, `share_count`, `total_income`, `hot_score`, `quality_score`, `last_active_time`, `recommend_weight`, `is_featured`, `is_official`, `extra_config`, `notice`, `rules`, `created_by`) VALUES
(1, 'JAVA_MASTER_2024', 'Java技术大师班', '专注于Java后端开发技术分享，包括Spring Boot、微服务、分布式系统等前沿技术。适合有一定基础的Java开发者进阶学习。', 'planet-avatar/1.gif', 'planet-avatar/1.gif', 1001, 6, 'Java,Spring Boot,微服务,分布式', 2, 299.00, 399.00, 199.00, 1, 1, 500, NULL, 1, 1, 0, 0, 1, 156, 89, 2340, 234, 45, 46844.00, 85, 4.8, '2024-01-15 14:30:00', 90, 1, 0, '{"theme": "tech", "level": "advanced"}', '欢迎加入Java技术大师班！这里有最新的技术分享和实战项目。', '1. 禁止发布广告内容\n2. 保持技术讨论的专业性\n3. 尊重他人，友善交流', 1001),
(2, 'PYTHON_AI_2024', 'Python AI实战营', '专注Python人工智能开发，涵盖机器学习、深度学习、数据分析等领域。从基础到实战，助你成为AI工程师。', 'planet-avatar/2.gif', 'planet-avatar/2.gif', 1002, 7, 'Python,AI,机器学习,深度学习', 2, 399.00, 599.00, 299.00, 2, 1, 300, '请简述你的Python基础和学习AI的目标', 0, 1, 1, 0, 1, 89, 67, 1890, 189, 23, 26611.00, 78, 4.6, '2024-01-15 16:45:00', 85, 1, 0, '{"theme": "ai", "level": "intermediate"}', 'Python AI实战营开营啦！每周都有实战项目分享。', '1. 发帖前请先搜索是否有重复内容\n2. 代码分享请使用代码块格式\n3. 积极参与讨论，共同进步', 1002),
(3, 'FRONTEND_PRO_2024', '前端开发进阶圈', '前端技术交流社区，涵盖Vue、React、小程序等技术栈。分享最新前端趋势和实战经验。', 'planet-avatar/3.gif', 'planet-avatar/3.gif', 1003, 8, 'Vue.js,React,前端,小程序', 1, 0.00, 0.00, 0.00, 1, 1, 0, NULL, 1, 1, 0, 1, 0, 234, 145, 3456, 345, 67, 0.00, 92, 4.7, '2024-01-15 18:20:00', 95, 0, 0, '{"theme": "frontend", "level": "all"}', '前端开发者的聚集地，欢迎大家分享技术心得！', '1. 技术分享优先\n2. 可以匿名发帖\n3. 鼓励原创内容', 1003),
(4, 'PRODUCT_DESIGN_2024', '产品设计思维圈', '产品经理和设计师的交流平台，分享产品设计方法论、用户体验设计、产品运营策略等。', 'planet-avatar/4.gif', 'planet-avatar/4.gif', 1004, 2, '产品经理,UI设计,用户体验,产品运营', 2, 199.00, 299.00, 149.00, 3, 1, 200, NULL, 1, 1, 1, 0, 0, 67, 34, 1234, 123, 12, 13333.00, 65, 4.4, '2024-01-15 10:15:00', 70, 0, 1, '{"theme": "design", "level": "professional"}', '产品设计思维圈，让设计更有温度！', '1. 分享设计作品请注明版权\n2. 讨论要有建设性\n3. 保护商业机密', 1004),
(5, 'CAREER_GROWTH_2024', '职场成长加油站', '职场人的成长社区，分享职业规划、面试技巧、工作经验、职场心得等内容。', 'planet-avatar/5.gif', 'planet-avatar/5.gif', 1005, 4, '职场规划,面试技巧,工作经验,职场心得', 1, 0.00, 0.00, 0.00, 1, 1, 0, NULL, 1, 1, 0, 1, 0, 345, 234, 4567, 456, 89, 0.00, 88, 4.5, '2024-01-15 12:30:00', 80, 0, 0, '{"theme": "career", "level": "all"}', '职场路上不孤单，一起成长一起进步！', '1. 分享真实经历\n2. 互相鼓励支持\n3. 保护个人隐私', 1005),
(6, 'GOLANG_EXPERT_2024', 'Go语言专家圈', '专注Go语言开发技术分享，包括并发编程、微服务架构、性能优化等。', 'planet-avatar/6.gif', 'planet-avatar/6.gif', 1006, 1, 'Go,并发,微服务,性能优化', 2, 199.00, 299.00, 149.00, 1, 1, 300, NULL, 1, 1, 0, 0, 1, 89, 56, 1567, 156, 23, 17711.00, 75, 4.6, '2024-01-14 10:20:00', 75, 0, 0, '{"theme": "tech", "level": "intermediate"}', 'Go语言学习交流社区', '1. 分享代码请注明来源\n2. 积极参与技术讨论', 1006),
(7, 'NODEJS_COMMUNITY_2024', 'Node.js开发社区', 'Node.js全栈开发技术交流，包括Express、Koa、Nest.js等框架学习。', 'planet-avatar/7.gif', 'planet-avatar/7.gif', 1007, 1, 'Node.js,Express,全栈开发', 1, 0.00, 0.00, 0.00, 1, 1, 0, NULL, 1, 1, 0, 1, 0, 178, 89, 2234, 223, 34, 0.00, 82, 4.4, '2024-01-13 15:30:00', 78, 0, 0, '{"theme": "tech", "level": "all"}', 'Node.js开发者聚集地', '1. 欢迎新手提问\n2. 鼓励开源项目分享', 1007),
(8, 'UNITY_GAMEDEV_2024', 'Unity游戏开发圈', 'Unity游戏开发技术分享，从入门到精通，包括2D/3D游戏制作。', 'planet-avatar/8.gif', 'planet-avatar/8.gif', 1008, 2, 'Unity,游戏开发,C#,3D建模', 2, 299.00, 399.00, 199.00, 2, 1, 200, '请描述你的游戏开发经验', 0, 1, 1, 0, 1, 67, 45, 1345, 134, 18, 20033.00, 70, 4.3, '2024-01-12 14:15:00', 72, 0, 0, '{"theme": "game", "level": "intermediate"}', 'Unity游戏开发学习营', '1. 分享项目请注明版权\n2. 鼓励原创作品展示', 1008),
(9, 'INDIE_GAME_STUDIO', '独立游戏工作室', '独立游戏开发者交流平台，分享创意、技术和商业化经验。', 'planet-avatar/9.gif', 'planet-avatar/9.gif', 1009, 2, '独立游戏,创意设计,商业化', 1, 0.00, 0.00, 0.00, 1, 1, 0, NULL, 1, 1, 0, 0, 0, 123, 78, 1890, 189, 25, 0.00, 68, 4.2, '2024-01-11 16:45:00', 70, 0, 0, '{"theme": "indie", "level": "all"}', '独立游戏开发者的家', '1. 支持原创游戏作品\n2. 分享开发心得', 1009),
(10, 'ML_ALGORITHM_2024', '机器学习算法研究院', '深入研究机器学习算法原理与实现，适合有一定数学基础的开发者。', 'planet-avatar/10.gif', 'planet-avatar/10.gif', 1010, 3, '机器学习,算法,数学,Python', 2, 399.00, 599.00, 299.00, 3, 1, 150, NULL, 1, 1, 1, 0, 1, 45, 34, 987, 98, 12, 17955.00, 65, 4.7, '2024-01-10 11:30:00', 68, 1, 0, '{"theme": "ai", "level": "advanced"}', '深度学习算法研究', '1. 需要一定数学基础\n2. 鼓励论文分享讨论', 1010),
(11, 'CV_VISION_LAB', '计算机视觉实验室', '计算机视觉技术交流，包括图像处理、目标检测、人脸识别等应用。', 'planet-avatar/11.gif', 'planet-avatar/11.gif', 1011, 3, '计算机视觉,OpenCV,深度学习', 2, 299.00, 399.00, 199.00, 1, 1, 200, NULL, 1, 1, 0, 0, 1, 78, 56, 1456, 145, 19, 23322.00, 73, 4.5, '2024-01-09 13:20:00', 75, 0, 0, '{"theme": "cv", "level": "intermediate"}', '计算机视觉技术分享', '1. 欢迎项目实战分享\n2. 提供数据集资源', 1011),
(12, 'PHOTOGRAPHY_MASTER', '摄影大师工坊', '专业摄影技术交流社区，包括人像、风光、商业摄影等各类摄影技巧分享。', 'planet-avatar/12.gif', 'planet-avatar/12.gif', 1012, 4, '摄影技巧,后期处理,器材评测', 2, 199.00, 299.00, 149.00, 1, 1, 500, NULL, 1, 1, 0, 0, 1, 234, 156, 3456, 345, 45, 46566.00, 88, 4.6, '2024-01-08 14:30:00', 85, 1, 0, '{"theme": "photo", "level": "all"}', '摄影爱好者的聚集地', '1. 分享作品请注明拍摄参数\n2. 尊重版权，禁止盗图', 1012),
(13, 'VIDEO_CREATOR_HUB', '视频创作者中心', '视频制作技术分享，包括拍摄、剪辑、调色、特效等全流程制作技巧。', 'planet-avatar/13.gif', 'planet-avatar/13.gif', 1013, 4, '视频制作,剪辑技巧,调色', 1, 0.00, 0.00, 0.00, 1, 1, 0, NULL, 1, 1, 0, 1, 0, 189, 123, 2567, 256, 38, 0.00, 85, 4.4, '2024-01-07 16:20:00', 82, 0, 0, '{"theme": "video", "level": "all"}', '视频创作者交流平台', '1. 欢迎原创作品分享\n2. 提供素材资源交流', 1013),
(14, 'INTERNET_TRENDS_2024', '互联网趋势观察', '关注互联网行业最新动态，分析商业模式、技术趋势和市场变化。', 'planet-avatar/14.gif', 'planet-avatar/14.gif', 1014, 5, '互联网趋势,商业模式,市场分析', 2, 99.00, 199.00, 79.00, 1, 1, 1000, NULL, 1, 1, 0, 0, 1, 456, 234, 5678, 567, 78, 45144.00, 92, 4.7, '2024-01-06 10:15:00', 90, 1, 0, '{"theme": "internet", "level": "all"}', '把握互联网脉搏', '1. 分享行业见解\n2. 理性讨论，避免恶意竞争', 1014),
(15, 'STARTUP_FOUNDERS', '创业者联盟', '创业者交流平台，分享创业经验、融资技巧、团队管理等实战经验。', 'planet-avatar/15.gif', 'planet-avatar/15.gif', 1015, 5, '创业经验,融资,团队管理', 2, 299.00, 499.00, 199.00, 2, 1, 300, '请简述你的创业经历或创业想法', 0, 1, 1, 0, 1, 123, 89, 2345, 234, 29, 36777.00, 78, 4.5, '2024-01-05 12:45:00', 80, 0, 0, '{"theme": "startup", "level": "professional"}', '创业路上，我们同行', '1. 真实分享创业经历\n2. 保护商业机密', 1015),
(16, 'UI_DESIGN_ACADEMY', 'UI设计学院', '专业UI/UX设计师交流社区，分享设计理念、工具使用、作品点评等内容。', 'planet-avatar/16.gif', 'planet-avatar/16.gif', 1016, 6, 'UI设计,UX设计,Figma,Sketch', 2, 199.00, 299.00, 149.00, 1, 1, 400, NULL, 1, 1, 0, 0, 1, 178, 123, 2890, 289, 34, 35422.00, 82, 4.5, '2024-01-04 11:30:00', 85, 0, 0, '{"theme": "design", "level": "intermediate"}', 'UI设计师的成长之路', '1. 作品分享请注明设计思路\n2. 互相学习，共同进步', 1016),
(17, 'GRAPHIC_DESIGN_STUDIO', '平面设计工作室', '平面设计师聚集地，包括海报设计、品牌设计、包装设计等各类平面设计作品分享。', 'planet-avatar/17.gif', 'planet-avatar/17.gif', 1017, 6, '平面设计,品牌设计,包装设计', 1, 0.00, 0.00, 0.00, 1, 1, 0, NULL, 1, 1, 0, 1, 0, 234, 167, 3234, 323, 45, 0.00, 86, 4.4, '2024-01-03 14:20:00', 88, 0, 0, '{"theme": "graphic", "level": "all"}', '创意无限，设计有界', '1. 尊重原创设计\n2. 提供建设性反馈', 1017),
(18, 'SIDE_HUSTLE_MASTERS', '副业赚钱大师班', '分享各种副业赚钱方法，包括自媒体、电商、技能变现等多种赚钱途径。', 'planet-avatar/18.gif', 'planet-avatar/18.gif', 1018, 7, '副业赚钱,自媒体,电商,技能变现', 2, 99.00, 199.00, 69.00, 1, 1, 800, NULL, 1, 1, 0, 0, 1, 567, 345, 6789, 678, 89, 56133.00, 95, 4.6, '2024-01-02 09:15:00', 92, 1, 0, '{"theme": "money", "level": "all"}', '副业改变生活，努力创造财富', '1. 分享真实收益数据\n2. 禁止发布违法项目', 1018),
(19, 'FREELANCER_COMMUNITY', '自由职业者社区', '自由职业者交流平台，分享接单技巧、客户管理、时间管理等自由职业经验。', 'planet-avatar/19.gif', 'planet-avatar/19.gif', 1019, 7, '自由职业,接单技巧,时间管理', 1, 0.00, 0.00, 0.00, 1, 1, 0, NULL, 1, 1, 0, 1, 0, 289, 178, 3567, 356, 42, 0.00, 83, 4.3, '2024-01-01 16:45:00', 85, 0, 0, '{"theme": "freelance", "level": "all"}', '自由职业，自由生活', '1. 分享真实工作经验\n2. 互助合作，共同成长', 1019),
(20, 'CYBERSECURITY_EXPERTS', '网络安全专家圈', '信息安全专业人士交流平台，分享安全技术、漏洞分析、防护策略等内容。', 'planet-avatar/20.gif', 'planet-avatar/20.gif', 1020, 8, '网络安全,漏洞分析,防护策略,渗透测试', 2, 399.00, 599.00, 299.00, 2, 1, 200, '请提供相关安全认证或工作经验', 0, 1, 1, 0, 1, 123, 89, 2345, 234, 29, 49077.00, 78, 4.7, '2023-12-31 14:30:00', 80, 1, 0, '{"theme": "security", "level": "professional"}', '守护网络安全，共建安全生态', '1. 禁止分享恶意代码\n2. 遵守法律法规', 1020),
(21, 'ETHICAL_HACKING_LAB', '白帽黑客实验室', '白帽黑客和渗透测试工程师交流社区，分享渗透测试技术、安全工具使用等。', 'planet-avatar/21.gif', 'planet-avatar/21.gif', 1021, 8, '白帽黑客,渗透测试,安全工具,漏洞挖掘', 2, 299.00, 399.00, 199.00, 2, 1, 150, '请简述你的安全技术背景', 0, 1, 1, 0, 1, 89, 67, 1890, 189, 23, 26611.00, 75, 4.5, '2023-12-30 11:20:00', 78, 0, 0, '{"theme": "hacking", "level": "intermediate"}', '以攻促防，提升安全意识', '1. 仅限合法渗透测试\n2. 保护客户隐私信息', 1021),
(22, 'FITNESS_TRANSFORMATION', '健身蜕变营', '健身爱好者和教练交流平台，分享训练计划、营养搭配、健身心得等内容。', 'planet-avatar/22.gif', 'planet-avatar/22.gif', 1022, 9, '健身训练,营养搭配,体型塑造,运动康复', 2, 199.00, 299.00, 149.00, 1, 1, 600, NULL, 1, 1, 0, 0, 1, 345, 234, 4567, 456, 67, 68655.00, 89, 4.6, '2023-12-29 08:30:00', 90, 1, 0, '{"theme": "fitness", "level": "all"}', '健康生活，从健身开始', '1. 分享科学训练方法\n2. 避免极端减肥建议', 1022),
(23, 'NUTRITION_WELLNESS', '营养健康管家', '营养师和健康管理师社区，分享营养知识、健康饮食、疾病预防等专业内容。', 'planet-avatar/23.gif', 'planet-avatar/23.gif', 1023, 9, '营养学,健康饮食,疾病预防,养生保健', 2, 299.00, 399.00, 199.00, 2, 1, 400, '请提供相关营养或医学背景', 0, 1, 1, 0, 1, 234, 156, 3456, 345, 48, 69666.00, 86, 4.7, '2023-12-28 10:45:00', 88, 0, 1, '{"theme": "nutrition", "level": "professional"}', '科学营养，健康生活', '1. 提供专业营养建议\n2. 不得替代医疗诊断', 1023),
(24, 'ENGLISH_MASTERY', '英语精通之路', '英语学习者交流社区，分享学习方法、口语练习、考试技巧等英语学习内容。', 'planet-avatar/24.gif', 'planet-avatar/24.gif', 1024, 10, '英语学习,口语练习,考试技巧,语法解析', 2, 199.00, 299.00, 149.00, 1, 1, 800, NULL, 1, 1, 0, 0, 1, 456, 289, 5678, 567, 78, 86533.00, 91, 4.5, '2023-12-27 14:20:00', 93, 1, 0, '{"theme": "english", "level": "all"}', 'Master English, Master the World', '1. 鼓励英语交流\n2. 互相帮助纠错', 1024),
(25, 'POLYGLOT_COMMUNITY', '多语言学习社区', '多语言学习爱好者聚集地，分享各种语言学习经验、文化交流、语言交换等。', 'planet-avatar/25.gif', 'planet-avatar/25.gif', 1025, 10, '多语言学习,文化交流,语言交换,国际交流', 1, 0.00, 0.00, 0.00, 1, 1, 0, NULL, 1, 1, 0, 1, 0, 378, 245, 4234, 423, 56, 0.00, 87, 4.4, '2023-12-26 16:30:00', 89, 0, 0, '{"theme": "languages", "level": "all"}', '语言是沟通世界的桥梁', '1. 尊重不同文化\n2. 积极参与语言交换', 1025),
(26, 'MUSIC_PRODUCTION_STUDIO', '音乐制作工作室', '音乐制作人和音频工程师交流平台，分享音乐制作技巧、混音技术、音频处理等内容。', 'planet-avatar/26.gif', 'planet-avatar/26.gif', 1026, 11, '音乐制作,混音技术,音频处理,编曲创作', 2, 299.00, 399.00, 199.00, 1, 1, 300, NULL, 1, 1, 0, 0, 1, 189, 123, 2890, 289, 42, 56511.00, 84, 4.6, '2023-12-25 19:30:00', 86, 0, 0, '{"theme": "music", "level": "intermediate"}', '音乐是灵魂的语言', '1. 尊重原创作品\n2. 分享制作技巧和经验', 1026),
(27, 'INDIE_MUSIC_COLLECTIVE', '独立音乐集体', '独立音乐人和音乐爱好者社区，分享原创音乐、演出经验、音乐推广等内容。', 'planet-avatar/27.gif', 'planet-avatar/27.gif', 1027, 11, '独立音乐,原创作品,演出经验,音乐推广', 1, 0.00, 0.00, 0.00, 1, 1, 0, NULL, 1, 1, 0, 1, 0, 234, 156, 3234, 323, 45, 0.00, 86, 4.4, '2023-12-24 17:45:00', 88, 0, 0, '{"theme": "indie_music", "level": "all"}', '独立音乐，自由表达', '1. 支持原创音乐\n2. 鼓励音乐人交流合作', 1027),
(28, 'TRAVEL_EXPLORERS', '旅行探险家', '旅行爱好者和探险家交流平台，分享旅行攻略、景点推荐、摄影作品、旅行心得等内容。', 'planet-avatar/28.gif', 'planet-avatar/28.gif', 1028, 12, '旅行攻略,景点推荐,旅行摄影,文化体验', 2, 199.00, 299.00, 149.00, 1, 1, 600, NULL, 1, 1, 0, 0, 1, 345, 234, 4567, 456, 67, 68655.00, 89, 4.5, '2023-12-23 14:20:00', 91, 1, 0, '{"theme": "travel", "level": "all"}', '世界那么大，我想去看看', '1. 分享真实旅行经历\n2. 尊重当地文化习俗', 1028),
(29, 'OUTDOOR_ADVENTURE', '户外探险俱乐部', '户外运动和探险爱好者社区，分享登山、徒步、野营、极限运动等户外经验。', 'planet-avatar/1.gif', 'planet-avatar/1.gif', 1029, 12, '户外探险,登山徒步,野营装备,极限运动', 1, 0.00, 0.00, 0.00, 1, 1, 0, NULL, 1, 1, 0, 0, 0, 278, 167, 3234, 323, 48, 0.00, 86, 4.4, '2023-12-22 10:30:00', 88, 0, 0, '{"theme": "outdoor", "level": "all"}', '在大自然中找到真正的自己', '1. 安全第一，做好防护\n2. 保护环境，不留痕迹', 1029),
(30, 'YOGA_MEDITATION', '瑜伽冥想空间', '瑜伽和冥想练习者的静心之地，分享体式技巧、冥想方法、身心健康理念。', 'planet-avatar/2.gif', 'planet-avatar/2.gif', 1022, 9, '瑜伽,冥想,身心健康,正念', 2, 99.00, 199.00, 79.00, 1, 1, 500, NULL, 1, 1, 0, 0, 1, 234, 156, 3234, 323, 45, 23166.00, 85, 4.6, '2024-01-15 19:20:00', 85, 0, 0, '{"theme": "yoga", "level": "all"}', '身心合一，内外兼修', '1. 保持练习的纯净性\n2. 分享正能量内容', 1022),
(31, 'ENGLISH_FLUENCY', '英语流利说', '英语学习者的交流平台，提供口语练习、语法讲解、文化交流等全方位英语学习支持。', 'planet-avatar/3.gif', 'planet-avatar/3.gif', 1023, 10, '英语学习,口语练习,语法,文化交流', 2, 199.00, 299.00, 149.00, 1, 1, 600, NULL, 1, 1, 0, 1, 1, 456, 289, 5678, 567, 78, 90744.00, 92, 4.7, '2024-01-14 16:45:00', 90, 1, 0, '{"theme": "language", "level": "all"}', 'Practice makes perfect!', '1. 鼓励用英语交流\n2. 互相纠错，共同进步', 1023),
(32, 'JAPANESE_CULTURE', '日语文化研习社', '日语学习和日本文化爱好者社区，从五十音到高级日语，从动漫到传统文化。', 'planet-avatar/4.gif', 'planet-avatar/4.gif', 1024, 10, '日语学习,日本文化,动漫,传统文化', 2, 159.00, 259.00, 119.00, 1, 1, 400, NULL, 1, 1, 0, 0, 1, 289, 178, 3567, 356, 52, 45951.00, 86, 4.4, '2024-01-13 14:30:00', 85, 0, 0, '{"theme": "japanese", "level": "all"}', 'こんにちは！日语学习之旅开始了', '1. 尊重日本文化\n2. 积极参与语言交换', 1024),
(33, 'MUSIC_PRODUCTION', '音乐制作工坊', '音乐制作人和创作者的聚集地，分享编曲技巧、混音经验、创作灵感等音乐制作内容。', 'planet-avatar/5.gif', 'planet-avatar/5.gif', 1025, 11, '音乐制作,编曲,混音,创作', 2, 299.00, 399.00, 199.00, 2, 1, 300, '请简述你的音乐制作经验', 0, 1, 1, 0, 1, 123, 89, 2345, 234, 34, 36777.00, 82, 4.5, '2024-01-12 20:15:00', 82, 0, 0, '{"theme": "music", "level": "intermediate"}', '用音乐表达内心的声音', '1. 尊重原创音乐作品\n2. 提供建设性的音乐反馈', 1025),
(34, 'INDIE_MUSICIANS', '独立音乐人联盟', '独立音乐人交流平台，分享原创作品、演出经验、音乐推广等独立音乐圈的故事。', 'planet-avatar/6.gif', 'planet-avatar/6.gif', 1026, 11, '独立音乐,原创,演出,推广', 1, 0.00, 0.00, 0.00, 1, 1, 0, NULL, 1, 1, 0, 1, 0, 178, 123, 2890, 289, 41, 0.00, 79, 4.3, '2024-01-11 18:45:00', 80, 0, 0, '{"theme": "indie_music", "level": "all"}', '独立音乐，独特声音', '1. 支持原创音乐创作\n2. 分享真实音乐经历', 1026),
(35, 'TRAVEL_ADVENTURERS', '环球旅行者', '旅行爱好者的聚集地，分享旅行攻略、美食推荐、文化体验、摄影技巧等旅行相关内容。', 'planet-avatar/7.gif', 'planet-avatar/7.gif', 1027, 12, '旅行攻略,美食推荐,文化体验,旅行摄影', 2, 199.00, 299.00, 149.00, 1, 1, 800, NULL, 1, 1, 0, 0, 1, 567, 345, 6789, 678, 89, 112833.00, 94, 4.6, '2024-01-10 09:30:00', 92, 1, 0, '{"theme": "travel", "level": "all"}', '世界那么大，一起去看看', '1. 分享真实旅行体验\n2. 提供实用旅行建议', 1027),
(36, 'OUTDOOR_EXPLORERS', '户外探险队', '户外运动和探险爱好者社区，包括登山、徒步、露营、攀岩等各类户外活动分享。', 'planet-avatar/8.gif', 'planet-avatar/8.gif', 1028, 12, '户外运动,登山,徒步,露营,攀岩', 1, 0.00, 0.00, 0.00, 1, 1, 0, NULL, 1, 1, 0, 0, 0, 234, 156, 3456, 345, 52, 0.00, 87, 4.4, '2024-01-09 15:20:00', 85, 0, 0, '{"theme": "outdoor", "level": "all"}', '探索自然，挑战自我', '1. 注意户外安全\n2. 保护自然环境', 1028),
(37, 'SCIENCE_POPULARIZATION', '科学普及站', '科学知识普及平台，用通俗易懂的方式分享物理、化学、生物、天文等各领域科学知识。', 'planet-avatar/9.gif', 'planet-avatar/9.gif', 1029, 13, '科学普及,物理,化学,生物,天文', 2, 99.00, 199.00, 79.00, 1, 1, 1000, NULL, 1, 1, 0, 0, 1, 456, 289, 5678, 567, 78, 45144.00, 91, 4.7, '2024-01-08 11:45:00', 90, 1, 0, '{"theme": "science", "level": "all"}', '科学改变世界，知识点亮未来', '1. 保证科学内容的准确性\n2. 用简单语言解释复杂概念', 1029),
(38, 'STEM_EDUCATION', 'STEM教育研究院', 'STEM教育工作者和家长交流平台，分享教学方法、学习资源、教育理念等STEM教育内容。', 'planet-avatar/10.gif', 'planet-avatar/10.gif', 1030, 13, 'STEM教育,教学方法,学习资源,教育理念', 2, 299.00, 399.00, 199.00, 2, 1, 400, '请简述你的教育背景或教学经验', 0, 1, 1, 0, 1, 189, 123, 2890, 289, 42, 56511.00, 84, 4.5, '2024-01-07 14:30:00', 85, 0, 0, '{"theme": "education", "level": "professional"}', '培养未来的科技创新人才', '1. 分享实用教学经验\n2. 关注学生全面发展', 1030),
(39, 'PSYCHOLOGY_GROWTH', '心理成长花园', '心理健康和个人成长社区，分享心理学知识、情绪管理、人际关系、自我提升等内容。', 'planet-avatar/11.gif', 'planet-avatar/11.gif', 1031, 14, '心理健康,情绪管理,人际关系,自我提升', 2, 199.00, 299.00, 149.00, 1, 1, 600, NULL, 1, 1, 0, 1, 1, 345, 234, 4567, 456, 67, 68655.00, 88, 4.6, '2024-01-06 16:20:00', 88, 0, 0, '{"theme": "psychology", "level": "all"}', '了解自己，成就更好的自己', '1. 保护个人隐私\n2. 提供专业心理建议', 1031),
(40, 'MINDFULNESS_PRACTICE', '正念冥想练习', '正念和冥想练习社区，帮助大家减压放松、提升专注力、培养内心平静。', 'planet-avatar/12.gif', 'planet-avatar/12.gif', 1032, 14, '正念,冥想,减压,专注力,内心平静', 1, 0.00, 0.00, 0.00, 1, 1, 0, NULL, 1, 1, 0, 0, 0, 278, 167, 3234, 323, 48, 0.00, 86, 4.4, '2024-01-05 19:45:00', 85, 0, 0, '{"theme": "mindfulness", "level": "all"}', '当下即是力量，正念改变生活', '1. 营造安静祥和的氛围\n2. 分享正能量内容', 1032),
(41, 'LITERATURE_SALON', '文学沙龙', '文学爱好者和创作者的交流平台，分享原创作品、文学评论、写作技巧等文学内容。', 'planet-avatar/13.gif', 'planet-avatar/13.gif', 1033, 15, '文学创作,原创作品,文学评论,写作技巧', 2, 199.00, 299.00, 149.00, 1, 1, 500, NULL, 1, 1, 0, 1, 1, 289, 189, 3789, 378, 56, 57711.00, 87, 4.5, '2024-01-04 14:20:00', 87, 0, 0, '{"theme": "literature", "level": "all"}', '文字是心灵的窗口', '1. 尊重原创作品\n2. 提供建设性文学反馈', 1033),
(42, 'ANCIENT_POETRY', '古诗词鉴赏', '中华古诗词爱好者社区，分享古诗词鉴赏、书法作品、传统文化知识等内容。', 'planet-avatar/14.gif', 'planet-avatar/14.gif', 1034, 15, '古诗词,书法,传统文化,文化传承', 1, 0.00, 0.00, 0.00, 1, 1, 0, NULL, 1, 1, 0, 0, 0, 234, 156, 3234, 323, 42, 0.00, 84, 4.4, '2024-01-03 16:45:00', 85, 0, 0, '{"theme": "poetry", "level": "all"}', '诗意人生，传承文化', '1. 传承中华优秀文化\n2. 鼓励原创诗词作品', 1034),
(43, 'MARKETING_MASTERS', '营销大师课堂', '营销专业人士交流平台，分享营销策略、品牌建设、市场推广、销售技巧等内容。', 'planet-avatar/15.gif', 'planet-avatar/15.gif', 1035, 16, '营销策略,品牌建设,市场推广,销售技巧', 2, 299.00, 399.00, 199.00, 2, 1, 400, '请简述你的营销或销售经验', 0, 1, 1, 0, 1, 234, 156, 3456, 345, 48, 69666.00, 86, 4.6, '2024-01-02 11:30:00', 88, 0, 0, '{"theme": "marketing", "level": "professional"}', '营销改变世界，创意驱动增长', '1. 分享实战营销经验\n2. 提供有价值的市场洞察', 1035),
(44, 'SALES_CHAMPIONS', '销售冠军俱乐部', '销售精英和创业者社区，分享销售技巧、客户开发、谈判策略、业绩提升等内容。', 'planet-avatar/16.gif', 'planet-avatar/16.gif', 1036, 16, '销售技巧,客户开发,谈判策略,业绩提升', 2, 199.00, 299.00, 149.00, 1, 1, 600, NULL, 1, 1, 0, 0, 1, 345, 234, 4567, 456, 67, 68655.00, 89, 4.5, '2024-01-01 09:15:00', 90, 0, 0, '{"theme": "sales", "level": "intermediate"}', '销售是一门艺术，成交是最好的回报', '1. 分享真实销售案例\n2. 互相学习，共同成长', 1036),
(45, 'CROSS_BORDER_ECOMMERCE', '跨境电商大本营', '跨境电商从业者交流平台，分享平台运营、产品选品、物流仓储、市场分析等内容。', 'planet-avatar/17.gif', 'planet-avatar/17.gif', 1037, 17, '跨境电商,平台运营,产品选品,物流仓储', 2, 399.00, 599.00, 299.00, 2, 1, 500, '请简述你的电商经验或兴趣方向', 0, 1, 1, 0, 1, 456, 289, 5678, 567, 78, 182244.00, 93, 4.7, '2023-12-30 10:20:00', 95, 1, 0, '{"theme": "ecommerce", "level": "professional"}', '全球市场，无限机会', '1. 分享实战运营经验\n2. 提供最新市场资讯', 1037),
(46, 'AMAZON_SELLERS', '亚马逊卖家联盟', '亚马逊平台卖家交流社区，分享店铺运营、广告投放、客户服务、政策解读等内容。', 'planet-avatar/18.gif', 'planet-avatar/18.gif', 1038, 17, '亚马逊,店铺运营,广告投放,客户服务', 2, 299.00, 399.00, 199.00, 1, 1, 400, NULL, 1, 1, 0, 0, 1, 289, 178, 3567, 356, 52, 86533.00, 88, 4.4, '2023-12-29 14:45:00', 90, 0, 0, '{"theme": "amazon", "level": "intermediate"}', '亚马逊创业，成就梦想', '1. 分享实用运营技巧\n2. 及时更新平台政策', 1038),
(47, 'ESPORTS_ARENA', '电竞竞技场', '电子竞技爱好者和职业选手交流平台，分享游戏技巧、赛事分析、战队管理、电竞资讯等内容。', 'planet-avatar/19.gif', 'planet-avatar/19.gif', 1039, 18, '电子竞技,游戏技巧,赛事分析,战队管理', 1, 0.00, 0.00, 0.00, 1, 1, 0, NULL, 1, 1, 0, 1, 0, 567, 345, 6789, 678, 89, 0.00, 92, 4.6, '2023-12-28 20:30:00', 94, 1, 0, '{"theme": "esports", "level": "all"}', '竞技精神，永不言败', '1. 公平竞技，拒绝作弊\n2. 尊重对手，友好交流', 1039),
(48, 'MOBILE_GAMING', '手游大神殿', '手机游戏玩家社区，分享手游攻略、新游推荐、游戏评测、充值优惠等内容。', 'planet-avatar/20.gif', 'planet-avatar/20.gif', 1040, 18, '手机游戏,游戏攻略,新游推荐,游戏评测', 1, 0.00, 0.00, 0.00, 1, 1, 0, NULL, 1, 1, 0, 0, 0, 456, 289, 5678, 567, 78, 0.00, 89, 4.5, '2023-12-27 18:45:00', 91, 0, 0, '{"theme": "mobile_game", "level": "all"}', '指尖上的精彩世界', '1. 分享真实游戏体验\n2. 理性消费，适度游戏', 1040),
(49, 'TECH_INDUSTRY', '科技行业观察', '科技行业从业者交流平台，分享行业动态、技术趋势、职场经验、创业故事等内容。', 'planet-avatar/21.gif', 'planet-avatar/21.gif', 1041, 19, '科技行业,行业动态,技术趋势,职场经验', 2, 399.00, 599.00, 299.00, 2, 1, 300, '请简述你的行业背景或关注领域', 0, 1, 1, 1, 1, 234, 156, 3456, 345, 48, 93244.00, 91, 4.7, '2023-12-26 15:20:00', 93, 1, 1, '{"theme": "tech_industry", "level": "professional"}', '洞察科技前沿，把握行业脉搏', '1. 分享深度行业见解\n2. 保护商业机密信息', 1041),
(50, 'FINANCE_CIRCLE', '金融圈内参', '金融行业专业人士交流社区，分享市场分析、投资策略、风险管理、政策解读等内容。', 'planet-avatar/22.gif', 'planet-avatar/22.gif', 1042, 19, '金融行业,市场分析,投资策略,风险管理', 2, 599.00, 899.00, 399.00, 2, 1, 200, '请提供相关金融从业资格证明', 0, 1, 1, 1, 1, 189, 123, 2890, 289, 42, 113211.00, 94, 4.8, '2023-12-25 11:10:00', 96, 1, 1, '{"theme": "finance", "level": "expert"}', '专业金融，理性投资', '1. 提供专业金融建议\n2. 严禁内幕交易信息', 1042),
(51, 'BOOK_LOVERS', '书友会', '读书爱好者交流社区，分享读书心得、好书推荐、阅读方法、书评讨论等内容。', 'planet-avatar/23.gif', 'planet-avatar/23.gif', 1043, 20, '读书心得,好书推荐,阅读方法,书评讨论', 1, 0.00, 0.00, 0.00, 1, 1, 0, NULL, 1, 1, 0, 1, 0, 678, 456, 7890, 789, 98, 0.00, 93, 4.6, '2023-12-24 16:30:00', 95, 1, 0, '{"theme": "books", "level": "all"}', '书中自有黄金屋，阅读改变人生', '1. 尊重版权，支持正版\n2. 理性讨论，包容不同观点', 1043),
(52, 'KNOWLEDGE_SHARING', '知识分享站', '知识分享和学习交流平台，涵盖各领域知识分享、学习方法、思维训练、认知提升等内容。', 'planet-avatar/24.gif', 'planet-avatar/24.gif', 1044, 20, '知识分享,学习方法,思维训练,认知提升', 2, 199.00, 299.00, 149.00, 1, 1, 800, NULL, 1, 1, 0, 1, 1, 567, 378, 6789, 678, 87, 112533.00, 95, 4.7, '2023-12-23 13:45:00', 97, 1, 0, '{"theme": "knowledge", "level": "all"}', '知识就是力量，分享创造价值', '1. 分享高质量内容\n2. 鼓励原创知识输出', 1044);

-- 插入星球标签关联数据
INSERT INTO `pla_planet_tag_relation` (`planet_id`, `tag_id`, `created_by`) VALUES 
(1, 1, 1001), (1, 2, 1001),
(2, 3, 1002),
(3, 4, 1003), (3, 5, 1003),
(4, 6, 1004), (4, 7, 1004),
(5, 9, 1005),
(6, 1, 1006), (7, 4, 1007), (8, 6, 1008),
(9, 6, 1009), (10, 3, 1010), (11, 3, 1011),
(12, 7, 1012), (13, 7, 1013), (14, 8, 1014),
(15, 9, 1015), (16, 7, 1016), (17, 7, 1017),
(18, 10, 1018), (19, 9, 1019), (20, 8, 1020),
(21, 9, 1021), (22, 9, 1022), (23, 9, 1023),
(24, 9, 1024), (25, 7, 1025), (26, 7, 1026),
(27, 8, 1027), (28, 9, 1028), (29, 8, 1029),
(30, 8, 1030), (31, 9, 1031), (32, 9, 1032),
(33, 7, 1033), (34, 7, 1034), (35, 8, 1035),
(36, 8, 1036), (37, 10, 1037), (38, 10, 1038),
(39, 3, 1039), (40, 3, 1040), (41, 8, 1041),
(42, 8, 1042), (43, 7, 1043), (44, 7, 1044),
(18, 8, 1018), (19, 8, 1019),
(22, 4, 1022), (23, 4, 1023),
(24, 7, 1024);

-- 插入星球成员数据
INSERT INTO `pla_planet_member` (`planet_id`, `user_id`, `member_type`, `join_time`, `expire_time`, `join_source`, `inviter_id`, `order_id`, `nickname`, `total_posts`, `total_likes`, `created_by`) VALUES
(1, 1, 1, '2024-01-02 14:30:00', '2025-01-02 14:30:00', 1, NULL, 10001, 'Spring学徒', 8, 45, 2001),
(1, 2, 1, '2024-01-03 09:15:00', '2025-01-03 09:15:00', 2, 1001, 10002, '微服务探索者', 12, 67, 2002),
(1, 3, 2, '2024-01-04 16:45:00', '2025-01-04 16:45:00', 1, NULL, 10003, 'Java架构师', 20, 123, 2003),
(2, 1, 3, '2024-01-01 11:00:00', NULL, 1, NULL, NULL, 'AI导师', 12, 78, 1002),
(2, 2, 1, '2024-01-05 10:20:00', '2025-01-05 10:20:00', 1, NULL, 10004, 'ML新手', 5, 23, 2004),
(2, 3, 1, '2024-01-06 15:30:00', NULL, 2, 1002, 10005, '数据科学家', 9, 56, 2005),
(3, 1, 3, '2024-01-01 12:00:00', NULL, 1, NULL, NULL, '前端大神', 25, 156, 1003),
(3, 2, 1, '2024-01-07 11:45:00', NULL, 1, NULL, NULL, 'Vue爱好者', 18, 89, 2006),
(3, 3, 1, '2024-01-08 14:20:00', NULL, 3, 2006, NULL, 'React开发者', 22, 134, 2007),
(4, 1, 3, '2024-01-01 13:00:00', NULL, 1, NULL, NULL, '设计总监', 8, 45, 1004),
(4, 2, 1, '2024-01-09 09:30:00', '2025-01-09 09:30:00', 1, NULL, 10006, 'UI设计师', 6, 34, 2008),
(5, 1, 3, '2024-01-01 14:00:00', NULL, 1, NULL, NULL, '职场导师', 35, 234, 1005),
(5, 2, 1, '2024-01-10 16:15:00', NULL, 1, NULL, NULL, '职场新人', 12, 67, 2009),
(5, 3, 1, '2024-01-11 10:45:00', NULL, 2, 1005, NULL, '资深HR', 28, 189, 2010);

-- 插入星球帖子数据
INSERT INTO `pla_planet_post` (`id`, `planet_id`, `user_id`, `title`, `summary`, `content_type`, `media_urls`, `is_anonymous`, `is_top`, `is_essence`, `view_count`, `like_count`, `comment_count`, `share_count`, `collect_count`, `audit_status`, `last_comment_time`, `hot_score`, `created_by`) VALUES
(1, 1, 1, 'Spring Boot 3.0 新特性详解', '本文详细介绍Spring Boot 3.0的主要新特性，包括对Java 17的支持、GraalVM原生镜像支持、以及性能优化等方面的改进。涵盖了新的配置属性、安全性增强、观测性改进等核心内容。', 2, NULL, 0, 1, 1, 234, 45, 12, 8, 15, 2, '2024-01-15 14:30:00', 85, 1001),
(2, 1, 1, '微服务架构设计最佳实践', '分享在实际项目中微服务架构设计的经验和踩过的坑，包括服务拆分、数据一致性、分布式事务等关键问题的解决方案。通过真实案例分析，帮助开发者避免常见陷阱。', 2, '["https://example.com/images/microservice1.jpg", "https://example.com/images/microservice2.jpg"]', 0, 0, 1, 189, 38, 8, 5, 12, 2, '2024-01-14 16:45:00', 78, 2003),
(3, 2, 1, 'PyTorch深度学习入门教程', '从零开始学习PyTorch深度学习框架，包括张量操作、自动求导、神经网络构建等基础知识...', 1, '["https://example.com/videos/pytorch_tutorial.mp4"]', 0, 1, 0, 156, 32, 6, 3, 8, 2, '2024-01-13 18:20:00', 72, 1002),
(4, 3, 1, 'Vue 3 Composition API 实战指南', 'Vue 3 Composition API的详细使用指南，通过实际项目案例展示如何更好地组织和复用代码...', 1, NULL, 0, 0, 1, 145, 28, 5, 4, 6, 2, '2024-01-12 10:15:00', 68, 1003),
(5, 3, 1, 'React Hooks 最佳实践', '分享React Hooks在实际开发中的最佳实践，包括useState、useEffect、自定义Hooks等的使用技巧...', 1, NULL, 1, 0, 0, 123, 25, 4, 2, 5, 2, '2024-01-11 14:30:00', 65, 2007),
(6, 4, 1, '产品需求分析方法论', '如何进行有效的产品需求分析，从用户调研到需求文档编写的完整流程...', 1, '["https://example.com/docs/requirement_analysis.pdf"]', 0, 0, 1, 98, 18, 3, 2, 4, 2, '2024-01-10 16:45:00', 58, 1004),
(7, 5, 1, '程序员职业规划指南', '作为一名资深程序员，分享从初级到高级的职业发展路径和建议...', 1, NULL, 0, 1, 1, 234, 56, 15, 12, 18, 2, '2024-01-15 12:30:00', 88, 1005),
(8, 5, 1, 'IT行业面试技巧分享', '从HR角度分享IT行业面试的注意事项和技巧，帮助大家更好地准备面试...', 1, NULL, 0, 0, 0, 167, 34, 8, 6, 9, 2, '2024-01-14 09:20:00', 75, 2010),
(9, 1, 1, 'Spring Security 6.0 权限控制深度解析', '详细讲解Spring Security 6.0的权限控制机制，包括基于角色和基于资源的权限控制实现方案...', 1, NULL, 0, 0, 1, 198, 42, 9, 7, 13, 2, '2024-01-16 10:30:00', 82, 1001),
(10, 1, 1, 'Docker容器化部署实战', '从零开始学习Docker容器技术，包括镜像构建、容器编排、生产环境部署等实战经验分享...', 1, '["https://example.com/images/docker1.jpg"]', 0, 0, 0, 176, 36, 7, 5, 11, 2, '2024-01-16 14:20:00', 79, 2003),
(11, 2, 1, 'TensorFlow 2.0 图像识别项目实战', '使用TensorFlow 2.0构建图像识别系统，从数据预处理到模型训练的完整流程...', 1, '["https://example.com/videos/tensorflow_demo.mp4"]', 0, 1, 0, 203, 48, 11, 8, 16, 2, '2024-01-16 16:45:00', 86, 1002),
(12, 2, 1, '机器学习算法对比分析', '详细对比常用机器学习算法的优缺点和适用场景，帮助选择合适的算法...', 1, NULL, 0, 0, 1, 145, 29, 6, 4, 8, 2, '2024-01-15 20:15:00', 71, 2004),
(13, 3, 1, 'TypeScript 高级类型系统详解', '深入理解TypeScript的高级类型系统，包括泛型、条件类型、映射类型等...', 1, NULL, 0, 0, 1, 189, 38, 8, 6, 12, 2, '2024-01-16 09:30:00', 77, 1003),
(14, 3, 1, '前端性能优化最佳实践', '分享前端性能优化的各种技巧，包括代码分割、懒加载、缓存策略等...', 1, '["https://example.com/docs/performance.pdf"]', 0, 1, 0, 167, 33, 7, 5, 9, 2, '2024-01-15 18:45:00', 74, 2006),
(15, 4, 1, '用户体验设计的心理学原理', '从心理学角度分析用户体验设计，如何运用认知心理学提升产品体验...', 1, NULL, 0, 0, 1, 134, 27, 5, 3, 7, 2, '2024-01-15 16:20:00', 68, 1004),
(16, 4, 1, 'Figma设计系统搭建指南', '详细介绍如何在Figma中搭建完整的设计系统，提高设计效率和一致性...', 1, '["https://example.com/images/figma_system.jpg"]', 0, 0, 0, 112, 22, 4, 2, 5, 2, '2024-01-15 11:30:00', 62, 2008),
(17, 5, 1, '技术管理者的成长之路', '从技术专家到技术管理者的转型经验分享，包括团队管理、技术决策等...', 1, NULL, 0, 1, 1, 256, 52, 14, 10, 19, 2, '2024-01-16 13:15:00', 89, 1005),
(18, 5, 1, '远程工作效率提升指南', '分享远程工作的经验和技巧，如何在家办公保持高效率...', 1, NULL, 0, 0, 0, 178, 35, 8, 6, 11, 2, '2024-01-15 14:40:00', 76, 2009),
(19, 6, 1, 'Go并发编程模式详解', '深入讲解Go语言的并发编程模式，包括goroutine、channel的高级用法...', 1, NULL, 0, 0, 1, 145, 31, 6, 4, 8, 2, '2024-01-15 10:45:00', 73, 1006),
(20, 6, 1, 'Go微服务架构实践', '基于Go语言构建微服务架构的实践经验，包括服务发现、负载均衡等...', 1, '["https://example.com/docs/go_microservice.pdf"]', 0, 0, 0, 123, 26, 5, 3, 6, 2, '2024-01-14 16:30:00', 69, 2011),
(21, 7, 1, 'Express.js中间件开发实战', '详细介绍Express.js中间件的开发和使用，包括错误处理、身份验证等...', 1, NULL, 0, 0, 1, 167, 34, 7, 5, 10, 2, '2024-01-15 12:20:00', 75, 1007),
(22, 7, 1, 'Node.js性能调优指南', '分享Node.js应用性能调优的方法和工具，提升应用响应速度...', 1, NULL, 0, 1, 0, 189, 39, 8, 6, 12, 2, '2024-01-14 19:15:00', 78, 2012),
(23, 8, 1, 'Flutter跨平台开发入门', 'Flutter移动应用开发入门教程，从环境搭建到应用发布的完整流程...', 1, '["https://example.com/videos/flutter_intro.mp4"]', 0, 1, 0, 198, 41, 9, 7, 14, 2, '2024-01-16 11:30:00', 81, 1008),
(24, 8, 1, 'React Native vs Flutter对比', '详细对比React Native和Flutter两个跨平台框架的优缺点和选择建议...', 1, NULL, 0, 0, 1, 156, 32, 6, 4, 9, 2, '2024-01-15 15:45:00', 72, 2013),
(25, 9, 1, 'MySQL索引优化实战', '深入讲解MySQL索引的原理和优化技巧，提升数据库查询性能...', 1, NULL, 0, 0, 1, 234, 47, 12, 8, 17, 2, '2024-01-16 08:30:00', 84, 1009),
(26, 9, 1, 'Redis缓存架构设计', '分享Redis在高并发系统中的缓存架构设计和最佳实践...', 1, '["https://example.com/images/redis_arch.jpg"]', 0, 1, 0, 178, 36, 8, 6, 11, 2, '2024-01-15 17:20:00', 77, 2014),
(27, 10, 1, 'Kubernetes集群管理实践', '详细介绍Kubernetes集群的搭建、管理和运维经验分享...', 1, NULL, 0, 0, 1, 167, 34, 7, 5, 10, 2, '2024-01-15 13:45:00', 75, 1010),
(28, 10, 1, 'DevOps工具链搭建指南', '从零开始搭建完整的DevOps工具链，包括CI/CD、监控、日志等...', 1, '["https://example.com/docs/devops_tools.pdf"]', 0, 0, 0, 145, 29, 6, 4, 8, 2, '2024-01-14 21:30:00', 71, 2015),
(29, 11, 1, '网络安全渗透测试入门', '网络安全渗透测试的基础知识和常用工具介绍...', 1, NULL, 0, 1, 1, 189, 38, 9, 7, 13, 2, '2024-01-16 14:15:00', 79, 1011),
(30, 11, 1, 'Web应用安全防护策略', '详细介绍Web应用常见安全漏洞和防护措施...', 1, NULL, 0, 0, 0, 156, 31, 6, 4, 9, 2, '2024-01-15 19:40:00', 73, 2016),
(31, 12, 1, '区块链技术原理解析', '深入浅出地讲解区块链技术的核心原理和应用场景...', 1, '["https://example.com/videos/blockchain_intro.mp4"]', 0, 0, 1, 198, 42, 10, 8, 15, 2, '2024-01-16 10:20:00', 82, 1012),
(32, 12, 1, '智能合约开发实战', '基于Solidity语言的智能合约开发教程和实战项目...', 1, NULL, 0, 0, 0, 167, 33, 7, 5, 10, 2, '2024-01-15 16:50:00', 74, 2017),
(33, 13, 1, 'Unity 3D游戏开发入门', 'Unity 3D游戏引擎入门教程，从基础操作到简单游戏制作...', 1, '["https://example.com/images/unity_demo.jpg"]', 0, 1, 0, 234, 48, 12, 9, 18, 2, '2024-01-16 15:30:00', 85, 1013),
(34, 13, 1, '游戏策划设计思路分享', '分享游戏策划的设计思路和方法论，如何设计有趣的游戏机制...', 1, NULL, 0, 0, 1, 178, 36, 8, 6, 11, 2, '2024-01-15 12:45:00', 76, 2018),
(35, 14, 1, '数据可视化最佳实践', '使用D3.js、ECharts等工具进行数据可视化的技巧和案例分享...', 1, NULL, 0, 0, 1, 156, 32, 6, 4, 9, 2, '2024-01-15 11:20:00', 72, 1014),
(36, 14, 1, 'Python数据分析实战项目', '基于真实数据的Python数据分析项目实战，从数据清洗到结果展示...', 1, '["https://example.com/docs/data_analysis.pdf"]', 0, 1, 0, 189, 39, 9, 7, 13, 2, '2024-01-16 09:15:00', 78, 2019),
(37, 15, 1, 'AWS云服务架构设计', '基于AWS云服务的系统架构设计和最佳实践分享...', 1, NULL, 0, 0, 1, 167, 34, 7, 5, 10, 2, '2024-01-15 14:30:00', 75, 1015),
(38, 15, 1, '云原生应用开发指南', '详细介绍云原生应用的开发理念和实践方法...', 1, NULL, 0, 0, 0, 145, 29, 6, 4, 8, 2, '2024-01-14 18:45:00', 71, 2020),
(39, 1, 1, 'Spring Boot集成Redis缓存实战', '详细介绍如何在Spring Boot项目中集成Redis缓存，包括配置、使用和性能优化...', 1, NULL, 0, 0, 1, 189, 38, 9, 7, 14, 2, '2024-01-17 10:30:00', 81, 1),
(40, 1, 1, 'MyBatis-Plus代码生成器使用指南', '分享MyBatis-Plus代码生成器的使用技巧，提高开发效率，减少重复代码编写...', 1, '["https://example.com/images/mybatis_plus.jpg"]', 0, 0, 0, 167, 34, 8, 6, 12, 2, '2024-01-17 14:20:00', 78, 2),
(41, 2, 3, 'Pandas数据处理技巧大全', '全面介绍Pandas库的数据处理技巧，包括数据清洗、转换、分析等实用方法...', 1, NULL, 0, 1, 0, 234, 47, 12, 9, 18, 2, '2024-01-17 16:45:00', 85, 3),
(42, 2, 4, 'Scikit-learn机器学习实战', '基于Scikit-learn库的机器学习项目实战，从数据预处理到模型评估的完整流程...', 1, '["https://example.com/videos/sklearn_demo.mp4"]', 0, 0, 1, 198, 41, 10, 8, 16, 2, '2024-01-17 20:15:00', 83, 4),
(43, 3, 5, 'Vue 3响应式原理深度解析', '深入分析Vue 3响应式系统的实现原理，包括Proxy、Ref、Reactive等核心概念...', 1, NULL, 0, 0, 1, 176, 36, 8, 6, 13, 2, '2024-01-17 09:30:00', 79, 5),
(44, 3, 6, 'Vite构建工具优化实践', '分享Vite构建工具的优化技巧，提升前端项目的构建速度和开发体验...', 1, NULL, 0, 1, 0, 156, 32, 7, 5, 11, 2, '2024-01-17 18:45:00', 76, 6),
(45, 4, 7, '产品数据分析方法论', '从产品角度分析用户行为数据，制定数据驱动的产品决策和优化策略...', 1, '["https://example.com/docs/product_analytics.pdf"]', 0, 0, 1, 145, 29, 6, 4, 9, 2, '2024-01-17 16:20:00', 73, 7),
(46, 4, 1, 'B端产品设计思维', '分享B端产品设计的特点和方法，如何平衡功能复杂性和用户体验...', 1, NULL, 0, 0, 0, 134, 27, 5, 3, 8, 2, '2024-01-17 11:30:00', 70, 1),
(47, 5, 2, '技术团队管理心得', '作为技术Leader的管理经验分享，包括团队建设、技术决策、绩效管理等...', 1, NULL, 0, 1, 1, 267, 54, 15, 11, 21, 2, '2024-01-17 13:15:00', 88, 2),
(48, 5, 3, '程序员如何做好职业规划', '从技术发展路径角度分析程序员的职业规划，包括技术专家和管理路线...', 1, NULL, 0, 0, 0, 189, 39, 9, 7, 15, 2, '2024-01-17 14:40:00', 80, 3),
(49, 6, 4, 'Go语言内存管理机制', '深入分析Go语言的内存管理机制，包括垃圾回收器的工作原理和优化技巧...', 1, NULL, 0, 0, 1, 156, 32, 7, 5, 10, 2, '2024-01-17 10:45:00', 77, 4),
(50, 6, 5, 'Go Web框架性能对比', '对比Gin、Echo、Fiber等主流Go Web框架的性能表现和使用场景...', 1, '["https://example.com/docs/go_frameworks.pdf"]', 0, 0, 0, 134, 28, 6, 4, 8, 2, '2024-01-17 16:30:00', 74, 5),
(51, 7, 6, 'Nest.js企业级应用开发', '基于Nest.js框架的企业级Node.js应用开发实践，包括架构设计和最佳实践...', 1, NULL, 0, 0, 1, 178, 36, 8, 6, 12, 2, '2024-01-17 12:20:00', 78, 6),
(52, 7, 7, 'Node.js微服务架构实践', '使用Node.js构建微服务架构的实践经验，包括服务拆分、通信机制等...', 1, NULL, 0, 1, 0, 198, 41, 9, 7, 14, 2, '2024-01-17 19:15:00', 81, 7),
(53, 8, 1, 'Flutter状态管理最佳实践', 'Flutter应用中状态管理的各种方案对比，包括Provider、Bloc、Riverpod等...', 1, '["https://example.com/videos/flutter_state.mp4"]', 0, 1, 0, 209, 43, 10, 8, 16, 2, '2024-01-17 11:30:00', 84, 1),
(54, 8, 2, 'React Native性能优化指南', '分享React Native应用性能优化的技巧和方法，提升用户体验...', 1, NULL, 0, 0, 1, 167, 34, 7, 5, 11, 2, '2024-01-17 15:45:00', 76, 2),
(55, 9, 3, 'PostgreSQL高级查询优化', '深入讲解PostgreSQL数据库的高级查询优化技巧，提升复杂查询性能...', 1, NULL, 0, 0, 1, 245, 49, 12, 9, 18, 2, '2024-01-17 08:30:00', 86, 3),
(56, 9, 4, 'MongoDB聚合管道实战', '详细介绍MongoDB聚合管道的使用方法和实际应用场景...', 1, '["https://example.com/images/mongodb_agg.jpg"]', 0, 1, 0, 189, 38, 9, 7, 13, 2, '2024-01-17 17:20:00', 80, 4),
(57, 10, 5, 'Docker Compose多服务编排', '使用Docker Compose进行多服务应用的编排和管理实践...', 1, NULL, 0, 0, 1, 178, 36, 8, 6, 12, 2, '2024-01-17 13:45:00', 78, 5),
(58, 10, 6, 'Jenkins CI/CD流水线搭建', '从零开始搭建Jenkins CI/CD流水线，实现自动化部署...', 1, '["https://example.com/docs/jenkins_pipeline.pdf"]', 0, 0, 0, 156, 32, 7, 5, 10, 2, '2024-01-17 21:30:00', 75, 6),
(59, 11, 7, 'Web应用安全测试方法', '介绍Web应用安全测试的常用方法和工具，包括OWASP Top 10漏洞检测...', 1, NULL, 0, 1, 1, 198, 41, 10, 8, 15, 2, '2024-01-17 14:15:00', 82, 7),
(60, 11, 1, 'SQL注入攻击与防护', '详细分析SQL注入攻击的原理和各种防护措施...', 1, NULL, 0, 0, 0, 167, 34, 7, 5, 11, 2, '2024-01-17 19:40:00', 77, 1),
(61, 12, 2, 'DeFi智能合约安全审计', '去中心化金融智能合约的安全审计方法和常见漏洞分析...', 1, '["https://example.com/videos/defi_audit.mp4"]', 0, 0, 1, 209, 43, 11, 9, 17, 2, '2024-01-17 10:20:00', 84, 2),
(62, 12, 3, 'NFT市场技术架构解析', '分析主流NFT交易平台的技术架构和实现原理...', 1, NULL, 0, 0, 0, 178, 36, 8, 6, 12, 2, '2024-01-17 16:50:00', 78, 3),
(63, 13, 4, 'Unity DOTS系统入门', 'Unity Data-Oriented Technology Stack系统的入门教程和性能优势...', 1, '["https://example.com/images/unity_dots.jpg"]', 0, 1, 0, 245, 50, 12, 10, 19, 2, '2024-01-17 15:30:00', 87, 4),
(64, 13, 5, '游戏AI行为树设计', '游戏中AI行为树的设计原理和实现方法，提升游戏智能化水平...', 1, NULL, 0, 0, 1, 189, 38, 9, 7, 14, 2, '2024-01-17 12:45:00', 80, 5),
(65, 14, 6, 'Tableau数据可视化进阶', 'Tableau高级数据可视化技巧，创建交互式仪表板和复杂图表...', 1, NULL, 0, 0, 1, 167, 34, 7, 5, 11, 2, '2024-01-17 11:20:00', 76, 6),
(66, 14, 7, 'Apache Spark大数据处理', '使用Apache Spark进行大规模数据处理的实践经验和优化技巧...', 1, '["https://example.com/docs/spark_tutorial.pdf"]', 0, 1, 0, 198, 41, 10, 8, 16, 2, '2024-01-17 09:15:00', 82, 7),
(67, 15, 1, 'AWS Lambda无服务器架构', '基于AWS Lambda的无服务器架构设计和实践案例分享...', 1, NULL, 0, 0, 1, 178, 36, 8, 6, 12, 2, '2024-01-17 14:30:00', 78, 1),
(68, 15, 2, 'Terraform基础设施即代码', '使用Terraform管理云基础设施的最佳实践和实战经验...', 1, NULL, 0, 0, 0, 156, 32, 7, 5, 10, 2, '2024-01-17 18:45:00', 75, 2),
(69, 16, 3, 'Figma组件库设计系统', '在Figma中构建完整设计系统的方法和组件库管理技巧...', 1, '["https://example.com/images/figma_components.jpg"]', 0, 0, 1, 189, 39, 9, 7, 13, 2, '2024-01-17 11:30:00', 80, 3),
(70, 16, 4, '用户体验研究方法论', '用户体验研究的各种方法和工具，从用户访谈到可用性测试...', 1, NULL, 0, 0, 0, 167, 34, 7, 5, 11, 2, '2024-01-17 16:45:00', 77, 4),
(71, 17, 5, 'Adobe Illustrator矢量插画', '使用AI软件创作矢量插画的技巧和创意思路分享...', 1, NULL, 0, 1, 0, 245, 50, 12, 10, 18, 2, '2024-01-17 14:20:00', 87, 5),
(72, 17, 6, '品牌视觉识别系统设计', '完整品牌VI设计的流程和要点，从Logo到应用系统...', 1, '["https://example.com/docs/brand_vi.pdf"]', 0, 0, 1, 198, 41, 10, 8, 15, 2, '2024-01-17 19:30:00', 83, 6),
(73, 18, 7, '小红书运营变现策略', '分享小红书平台的内容运营和商业变现方法...', 1, NULL, 0, 0, 0, 278, 56, 14, 11, 22, 2, '2024-01-17 09:15:00', 89, 7),
(74, 18, 1, '抖音短视频制作技巧', '抖音平台短视频内容创作和涨粉变现的实战经验...', 1, '["https://example.com/videos/douyin_tips.mp4"]', 0, 1, 0, 234, 47, 12, 9, 18, 2, '2024-01-17 16:30:00', 85, 1),
(75, 19, 2, '自由职业者税务规划', '自由职业者的税务筹划和财务管理建议...', 1, NULL, 0, 0, 1, 189, 38, 9, 7, 14, 2, '2024-01-17 14:40:00', 81, 2),
(76, 19, 3, '远程工作沟通技巧', '远程团队协作中的有效沟通方法和工具使用...', 1, NULL, 0, 0, 0, 167, 34, 7, 5, 11, 2, '2024-01-17 10:20:00', 77, 3),
(77, 20, 4, '零信任网络安全架构', '零信任安全模型的设计原理和企业实施方案...', 1, '["https://example.com/docs/zero_trust.pdf"]', 0, 0, 1, 198, 41, 10, 8, 16, 2, '2024-01-17 15:30:00', 83, 4),
(78, 20, 5, '云安全风险评估方法', '云环境下的安全风险识别和评估方法论...', 1, NULL, 0, 1, 1, 178, 36, 8, 6, 12, 2, '2024-01-17 18:15:00', 79, 5),
(79, 21, 6, 'Burp Suite渗透测试实战', '使用Burp Suite进行Web应用渗透测试的实战技巧...', 1, NULL, 0, 0, 0, 167, 34, 7, 5, 11, 2, '2024-01-17 11:20:00', 76, 6),
(80, 21, 7, 'Metasploit框架使用指南', 'Metasploit渗透测试框架的使用方法和实战案例...', 1, '["https://example.com/videos/metasploit_demo.mp4"]', 0, 0, 1, 189, 39, 9, 7, 13, 2, '2024-01-17 20:45:00', 80, 7),
(81, 22, 1, '力量训练计划制定', '科学制定力量训练计划的原则和方法，适合不同水平的健身者...', 1, NULL, 0, 0, 1, 256, 52, 13, 10, 20, 2, '2024-01-17 08:30:00', 88, 1),
(82, 22, 2, '运动营养补充指南', '运动前中后的营养补充策略和常见补剂的使用方法...', 1, '["https://example.com/docs/sports_nutrition.pdf"]', 0, 1, 0, 198, 41, 10, 8, 15, 2, '2024-01-17 17:20:00', 83, 2),
(83, 23, 3, '地中海饮食健康指南', '地中海饮食模式的营养价值和实践方法...', 1, NULL, 0, 0, 1, 189, 38, 9, 7, 14, 2, '2024-01-17 10:45:00', 81, 3),
(84, 23, 4, '慢性病营养干预方案', '针对糖尿病、高血压等慢性病的营养干预策略...', 1, NULL, 0, 0, 0, 167, 34, 7, 5, 11, 2, '2024-01-17 16:20:00', 77, 4),
(85, 24, 5, '雅思口语高分技巧', '雅思口语考试的备考策略和高分答题技巧分享...', 1, '["https://example.com/videos/ielts_speaking.mp4"]', 0, 1, 1, 234, 47, 12, 9, 18, 2, '2024-01-17 14:15:00', 85, 5),
(86, 24, 6, '商务英语写作实务', '商务英语邮件、报告、提案等文档的写作技巧和模板...', 1, NULL, 0, 0, 0, 178, 36, 8, 6, 12, 2, '2024-01-17 11:40:00', 78, 6),
(87, 25, 7, '韩语入门学习计划', '零基础韩语学习的系统规划和学习方法...', 1, NULL, 0, 0, 1, 189, 39, 9, 7, 14, 2, '2024-01-17 19:30:00', 81, 7),
(88, 25, 1, '多语言学习记忆法', '高效记忆多种语言词汇和语法的方法和技巧...', 1, '["https://example.com/docs/language_memory.pdf"]', 0, 0, 0, 167, 34, 7, 5, 11, 2, '2024-01-17 16:45:00', 77, 1);

-- 插入评论数据
INSERT INTO `pla_planet_comment` (`post_id`, `planet_id`, `user_id`, `parent_id`, `reply_to_user_id`, `content`, `is_anonymous`, `like_count`, `reply_count`, `created_by`) VALUES
(1, 1, 1, 0, NULL, '感谢分享！Spring Boot 3.0的GraalVM支持确实很棒，启动速度提升明显。', 0, 8, 2, 2001),
(1, 1, 2, 1, 2001, '是的，我们项目已经在使用了，内存占用也减少了不少。', 0, 5, 0, 2002),
(1, 1, 1, 1, 2001, '很高兴对你有帮助，后续会继续分享更多实战经验。', 0, 3, 0, 1001),
(2, 1, 2, 0, NULL, '微服务确实复杂，但是这篇文章讲得很清楚，收藏了！', 0, 6, 1, 2001),
(3, 2, 4, 0, NULL, '正在学习PyTorch，这个教程来得太及时了！', 0, 4, 0, 2004),
(4, 3, 6, 0, NULL, 'Composition API确实比Options API更灵活，感谢分享！', 0, 7, 0, 2006),
(7, 5, 1, 0, NULL, '作为职场新人，这篇文章给了我很多启发，谢谢！', 0, 12, 3, 2009),
(7, 5, 1, 7, 2009, '职场路上确实需要规划，建议多参加技术分享和培训。', 0, 8, 0, 2010);

-- 插入收藏记录
INSERT INTO `pla_planet_collect` (`planet_id`, `user_id`, `post_id`, `folder_name`, `created_by`) VALUES
(1, 1, 1, '技术学习', 1),
(1, 2, 2, '架构设计', 2),
(2, 4, 3, '深度学习', 4),
(3, 6, 4, 'Vue学习', 6),
(5, 9, 7, '职业规划', 9);

-- 插入星球申请记录
INSERT INTO `pla_planet_apply` (`planet_id`, `user_id`, `apply_reason`, `answer`, `apply_status`, `audit_reason`, `audit_time`, `audit_by`, `created_by`) VALUES
(2, 2011, '希望学习AI技术，提升自己的技术能力', '有Python基础，希望转向AI方向发展', 1, NULL, NULL, NULL, 2011),
(2, 2012, '对机器学习很感兴趣', '计算机专业在读，想深入学习AI', 2, '申请理由充分，欢迎加入', '2024-01-15 10:30:00', 1002, 2012),
(4, 2013, '产品经理转行', '有3年产品经验，希望学习更多设计思维', 3, '当前名额已满，请等待下期开放', '2024-01-14 15:20:00', 1004, 2013);

-- 插入邀请记录
INSERT INTO `pla_planet_invite` (`planet_id`, `inviter_id`, `invitee_id`, `invite_code`, `invite_type`, `invite_message`, `expire_time`, `max_use_count`, `used_count`, `invite_status`, `created_by`) VALUES
(1, 1, 2, 'JAVA2024INVITE001', 1, '邀请你加入Java技术大师班，一起学习进步！', '2024-02-01 23:59:59', 1, 1, 2, 1),
(2, 2, 5, 'AI2024INVITE001', 1, '欢迎加入Python AI实战营！', '2024-02-15 23:59:59', 1, 1, 2, 2),
(3, 3, NULL, 'FRONTEND2024SHARE', 2, '前端技术分享，欢迎大家加入！', '2024-03-01 23:59:59', 10, 3, 1, 3),
(5, 5, 10, 'CAREER2024INVITE001', 1, '职场成长路上，我们一起前行！', '2024-02-20 23:59:59', 1, 1, 2, 5);

-- 插入通知数据
INSERT INTO `pla_planet_notification` (`planet_id`, `user_id`, `sender_id`, `notification_type`, `title`, `content`, `target_type`, `target_id`, `is_read`, `read_time`, `created_by`) VALUES
(1, 1, 1, 1, '新帖子发布', 'Java大师发布了新帖子《Spring Boot 3.0 新特性详解》', 1, 1, 1, '2024-01-15 15:00:00', 1),
(1, 2, 1, 2, '新评论', '有人评论了你关注的帖子', 1, 1, 0, NULL, 2),
(1, 3, 1, 3, '获得点赞', '你的帖子《微服务架构设计最佳实践》获得了点赞', 1, 2, 1, '2024-01-14 17:00:00', 3),
(2, 4, 2, 6, '星球公告', 'Python AI实战营本周学习计划发布', 3, 2, 0, NULL, 2),
(5, 9, 5, 1, '新帖子发布', '职场导师发布了新帖子《程序员职业规划指南》', 1, 7, 1, '2024-01-15 13:00:00', 5);

-- 插入星球设置数据
INSERT INTO `pla_planet_setting` (`planet_id`, `setting_key`, `setting_value`, `setting_type`, `description`, `created_by`) VALUES
(1, 'welcome_message', '欢迎加入Java技术大师班！请先阅读星球规则。', 1, '新成员欢迎消息', 1),
(1, 'post_reward_points', '10', 2, '发帖奖励积分', 1),
(1, 'comment_reward_points', '2', 2, '评论奖励积分', 1),
(2, 'welcome_message', '欢迎来到Python AI实战营！', 1, '新成员欢迎消息', 2),
(2, 'ai_model_enabled', 'true', 3, '是否启用AI助手', 2),
(3, 'anonymous_post_enabled', 'true', 3, '是否允许匿名发帖', 3),
(4, 'design_review_enabled', 'true', 3, '是否开启设计评审功能', 4),
(5, 'career_guidance_enabled', 'true', 3, '是否开启职业指导功能', 5);





INSERT INTO haha.pla_planet_post_article (id, post_id, content, cover_image, tags, word_count, reading_time, is_original, source_url, version, status, is_deleted, created_by, updated_by, created_at, updated_at) VALUES (1, 1, '## 核心要点
- **编译型语言定义**: 源代码在执行前，通过编译器一次性转换成目标机器码（或中间字节码），生成可执行文件或库。
- **解释型语言定义**: 源代码在运行时，通过解释器逐行（或逐块）翻译成机器指令并立即执行，不生成独立的可执行文件。
- **核心操作差异**:
    - **翻译时机**: 编译型是执行前（Ahead-of-Time），解释型是执行中（Runtime）。
    - **产物**: 编译型产生目标代码（机器码/字节码），解释型不直接产生持久化的目标代码（或产生临时的内部表示）。
    - **执行方式**: 编译型直接由操作系统/CPU（或虚拟机）执行目标代码，解释型需要解释器参与整个执行过程。
- **必须包含的核心概念**: 编译器、解释器、源代码、目标代码（机器码/字节码）、执行时机。
- **面试官最关注的技术要点**: 对“翻译”和“执行”这两个阶段如何分离或结合的理解，以及由此带来的性能、可移植性、开发效率等方面的差异。

## 知识点详解
### 概念解释
**编译型语言 (Compiled Language)**:
这类语言编写的程序在执行之前，需要一个称为“编译器”的专门程序进行处理。编译器会读取全部源代码，进行词法分析、语法分析、语义分析、优化等步骤，最终将源代码一次性转换成特定平台（如特定CPU架构和操作系统）的机器码，或者是一种中间代码（如Java的字节码）。这个转换后的代码通常保存在一个独立的可执行文件或库文件中。运行时，操作系统直接加载并执行这个机器码文件，或者由一个虚拟机执行中间代码。

**解释型语言 (Interpreted Language)**:
这类语言编写的程序不需要在执行前进行完整的编译过程生成独立的可执行文件。相反，源代码在运行时由一个称为“解释器”的程序逐行或逐块地读取、分析，并立即转换成机器指令（或某种内部表示）来执行。源代码和解释器在程序运行时都必须存在。

### 技术原理 (核心操作差异)

| 特性         | 编译型语言                                     | 解释型语言                                       |
| :----------- | :--------------------------------------------- | :----------------------------------------------- |
| **翻译时机** | **执行前 (Ahead-of-Time, AOT)**：源代码一次性完整翻译。 | **执行中 (Runtime)**：源代码逐行/逐块翻译并执行。  |
| **翻译工具** | 编译器 (Compiler)                              | 解释器 (Interpreter)                             |
| **产物**     | 目标代码 (机器码或中间字节码)，通常是独立文件。   | 通常不产生持久化的目标代码文件（或产生临时内部表示）。 |
| **执行过程** | 1. 编译：源代码 -> 目标代码。<br>2. 执行：操作系统/虚拟机直接运行目标代码。 | 1. 解释与执行：解释器读取源代码 -> 翻译 -> 立即执行。这两个动作交织进行。 |
| **运行时依赖** | 编译后通常不依赖编译器（除非是JIT编译的字节码需要VM）。 | 始终依赖解释器。                                 |
| **错误检测** | 大部分错误在编译阶段发现。                       | 错误通常在运行时才暴露（部分静态分析工具可在运行前发现一些错误）。 |
| **运行效率** | 通常较高，因为已翻译成优化过的机器码或高效字节码。 | 通常较低，因为有运行时翻译的开销。                 |
| **跨平台性** | 较差（若编译为机器码），需为不同平台分别编译。较好（若编译为字节码，如Java）。 | 通常较好，只要目标平台有相应的解释器即可运行同一份源代码。 |
| **开发效率/灵活性** | 编译耗时，修改后需重新编译。                   | 修改代码后可立即运行，调试方便，开发周期短。       |

**核心操作流程对比**:

*   **编译型语言**:
    1.  `源代码` --(编译器)--> `目标代码 (机器码/字节码)`
    2.  `目标代码` --(操作系统/虚拟机)--> `执行结果`
    *核心在于“先完整翻译，后独立执行”。*

*   **解释型语言**:
    1.  `源代码` --(解释器)-->(翻译一行/块 -> 执行一行/块)--> `执行结果`
    *核心在于“边翻译，边执行”。*

## 实际应用
### 使用场景
**编译型语言典型代表及场景**:
-   **C, C++**: 操作系统、游戏引擎、嵌入式系统、高性能计算等对性能要求极高的领域。
-   **Go, Rust**: 后端服务、系统工具、并发编程。
-   **Java, C#** (通常被认为是混合型，但其第一步是编译到字节码): 企业级应用、大型系统、Android应用(Java/Kotlin)。

**解释型语言典型代表及场景**:
-   **Python**: Web后端开发、脚本自动化、数据科学、人工智能、快速原型开发。
-   **JavaScript**: Web前端开发、Node.js后端开发、移动应用 (React Native, Ionic)。
-   **Ruby**: Web开发 (Ruby on Rails)。
-   **PHP**: Web后端开发。
-   **Shell脚本 (Bash, Zsh)**: 系统管理和自动化任务。

### 最佳实践
-   选择编译型语言通常是为了追求极致的运行性能、更早的错误发现和更小的运行时依赖（对于编译到原生机器码的语言）。
-   选择解释型语言通常是为了快速开发、便捷的跨平台性（代码层面）、动态性和灵活性。
-   许多现代语言或其主流实现采用混合策略（如Java、Python的CPython实现编译到字节码，再由虚拟机解释执行，并可能进行JIT编译）以结合两者的优点。

## 进阶思考
-   **混合型语言**: 许多语言（如Java, C#, Python）实际上是混合型的。例如，Java源代码先被编译成平台无关的字节码，然后由Java虚拟机（JVM）解释执行。JVM内部通常还包含JIT（Just-In-Time）编译器，它可以在运行时将频繁执行的字节码编译成本地机器码以提高性能。Python (CPython) 也是先将`.py`文件编译成`.pyc`字节码文件，然后由Python虚拟机解释执行。
-   **JIT (Just-In-Time) 编译**: 这种技术试图结合编译型和解释型语言的优点。代码在运行时被动态地编译成机器码，通常只针对“热点”代码（频繁执行的部分），从而提高执行效率，同时保留解释型语言的部分灵活性。
-   **AOT (Ahead-Of-Time) 编译**: 一些原本是解释型或基于VM的语言也开始支持AOT编译，直接将源代码或字节码编译成本地机器码，以提高启动速度和峰值性能，减少运行时开销。
-   **语言规范 vs. 语言实现**: 严格来说，编译型或解释型是语言的一种实现方式，而不是语言本身的固有属性。例如，C语言通常被编译执行，但也存在C语言的解释器。反之，理论上也可以为Python写一个完整的AOT编译器。我们通常谈论的是该语言最主流或最典型的实现方式。

## 面试实战回答
### 标准回答
"编译型语言和解释型语言，它们最核心的区别在于源代码转换成机器能够执行的指令的**时机和方式**。

**编译型语言**，比如C++或Go，在程序运行之前，会有一个明确的‘编译’步骤。在这个步骤中，‘编译器’这个工具会把我们写的全部源代码一次性地转换成目标平台的机器码（或者是像Java那样的中间字节码），并生成一个可执行文件。之后，我们运行的是这个编译好的文件，CPU可以直接理解并执行这些机器码。所以，它的核心操作是‘**先完整翻译，后独立执行**’。这样做的好处通常是运行效率高，因为代码已经优化并转换成了机器直接认识的指令，而且很多错误能在编译阶段就被发现。

**解释型语言**，比如Python或JavaScript，它们通常不需要这个预先的、完整的编译步骤来生成可执行文件。而是通过一个叫做‘解释器’的程序，在程序运行时，逐行或者逐块地读取源代码，然后实时地把每一句代码翻译成机器指令并立即执行。所以，它的核心操作是‘**边翻译，边执行**’。这种方式的好处是开发效率高，修改代码后能立刻看到结果，调试也相对方便，而且通常具有更好的跨平台性，因为同一份源代码只要在有对应解释器的不同平台上就能运行。

简单总结一下，核心差异就是：编译型是‘一次编译，多次运行（编译产物）’，解释型是‘每次运行，每次解释（源代码）’。当然，现在很多语言比如Java或Python，它们会采用一些混合的策略，比如先编译成字节码，再由虚拟机解释执行，虚拟机内部可能还会有JIT（即时编译）技术来优化性能，这样就能结合两者的部分优点。"
', 'https://www.notion.so/images/page-cover/met_winslow_homer_maine_coast.jpg', '魂', 1233, 45, 1, null, 1, 1, 0, 1, 1, '2025-08-20 13:47:49', '2025-08-20 14:08:01');
INSERT INTO haha.pla_planet_post_article (id, post_id, content, cover_image, tags, word_count, reading_time, is_original, source_url, version, status, is_deleted, created_by, updated_by, created_at, updated_at) VALUES (2, 2, '## 核心要点
- **编译型语言定义**: 源代码在执行前，通过编译器一次性转换成目标机器码（或中间字节码），生成可执行文件或库。
- **解释型语言定义**: 源代码在运行时，通过解释器逐行（或逐块）翻译成机器指令并立即执行，不生成独立的可执行文件。
- **核心操作差异**:
    - **翻译时机**: 编译型是执行前（Ahead-of-Time），解释型是执行中（Runtime）。
    - **产物**: 编译型产生目标代码（机器码/字节码），解释型不直接产生持久化的目标代码（或产生临时的内部表示）。
    - **执行方式**: 编译型直接由操作系统/CPU（或虚拟机）执行目标代码，解释型需要解释器参与整个执行过程。
- **必须包含的核心概念**: 编译器、解释器、源代码、目标代码（机器码/字节码）、执行时机。
- **面试官最关注的技术要点**: 对“翻译”和“执行”这两个阶段如何分离或结合的理解，以及由此带来的性能、可移植性、开发效率等方面的差异。

## 知识点详解
### 概念解释
**编译型语言 (Compiled Language)**:
这类语言编写的程序在执行之前，需要一个称为“编译器”的专门程序进行处理。编译器会读取全部源代码，进行词法分析、语法分析、语义分析、优化等步骤，最终将源代码一次性转换成特定平台（如特定CPU架构和操作系统）的机器码，或者是一种中间代码（如Java的字节码）。这个转换后的代码通常保存在一个独立的可执行文件或库文件中。运行时，操作系统直接加载并执行这个机器码文件，或者由一个虚拟机执行中间代码。

**解释型语言 (Interpreted Language)**:
这类语言编写的程序不需要在执行前进行完整的编译过程生成独立的可执行文件。相反，源代码在运行时由一个称为“解释器”的程序逐行或逐块地读取、分析，并立即转换成机器指令（或某种内部表示）来执行。源代码和解释器在程序运行时都必须存在。

### 技术原理 (核心操作差异)

| 特性         | 编译型语言                                     | 解释型语言                                       |
| :----------- | :--------------------------------------------- | :----------------------------------------------- |
| **翻译时机** | **执行前 (Ahead-of-Time, AOT)**：源代码一次性完整翻译。 | **执行中 (Runtime)**：源代码逐行/逐块翻译并执行。  |
| **翻译工具** | 编译器 (Compiler)                              | 解释器 (Interpreter)                             |
| **产物**     | 目标代码 (机器码或中间字节码)，通常是独立文件。   | 通常不产生持久化的目标代码文件（或产生临时内部表示）。 |
| **执行过程** | 1. 编译：源代码 -> 目标代码。<br>2. 执行：操作系统/虚拟机直接运行目标代码。 | 1. 解释与执行：解释器读取源代码 -> 翻译 -> 立即执行。这两个动作交织进行。 |
| **运行时依赖** | 编译后通常不依赖编译器（除非是JIT编译的字节码需要VM）。 | 始终依赖解释器。                                 |
| **错误检测** | 大部分错误在编译阶段发现。                       | 错误通常在运行时才暴露（部分静态分析工具可在运行前发现一些错误）。 |
| **运行效率** | 通常较高，因为已翻译成优化过的机器码或高效字节码。 | 通常较低，因为有运行时翻译的开销。                 |
| **跨平台性** | 较差（若编译为机器码），需为不同平台分别编译。较好（若编译为字节码，如Java）。 | 通常较好，只要目标平台有相应的解释器即可运行同一份源代码。 |
| **开发效率/灵活性** | 编译耗时，修改后需重新编译。                   | 修改代码后可立即运行，调试方便，开发周期短。       |

**核心操作流程对比**:

*   **编译型语言**:
    1.  `源代码` --(编译器)--> `目标代码 (机器码/字节码)`
    2.  `目标代码` --(操作系统/虚拟机)--> `执行结果`
    *核心在于“先完整翻译，后独立执行”。*

*   **解释型语言**:
    1.  `源代码` --(解释器)-->(翻译一行/块 -> 执行一行/块)--> `执行结果`
    *核心在于“边翻译，边执行”。*

## 实际应用
### 使用场景
**编译型语言典型代表及场景**:
-   **C, C++**: 操作系统、游戏引擎、嵌入式系统、高性能计算等对性能要求极高的领域。
-   **Go, Rust**: 后端服务、系统工具、并发编程。
-   **Java, C#** (通常被认为是混合型，但其第一步是编译到字节码): 企业级应用、大型系统、Android应用(Java/Kotlin)。

**解释型语言典型代表及场景**:
-   **Python**: Web后端开发、脚本自动化、数据科学、人工智能、快速原型开发。
-   **JavaScript**: Web前端开发、Node.js后端开发、移动应用 (React Native, Ionic)。
-   **Ruby**: Web开发 (Ruby on Rails)。
-   **PHP**: Web后端开发。
-   **Shell脚本 (Bash, Zsh)**: 系统管理和自动化任务。

### 最佳实践
-   选择编译型语言通常是为了追求极致的运行性能、更早的错误发现和更小的运行时依赖（对于编译到原生机器码的语言）。
-   选择解释型语言通常是为了快速开发、便捷的跨平台性（代码层面）、动态性和灵活性。
-   许多现代语言或其主流实现采用混合策略（如Java、Python的CPython实现编译到字节码，再由虚拟机解释执行，并可能进行JIT编译）以结合两者的优点。

## 进阶思考
-   **混合型语言**: 许多语言（如Java, C#, Python）实际上是混合型的。例如，Java源代码先被编译成平台无关的字节码，然后由Java虚拟机（JVM）解释执行。JVM内部通常还包含JIT（Just-In-Time）编译器，它可以在运行时将频繁执行的字节码编译成本地机器码以提高性能。Python (CPython) 也是先将`.py`文件编译成`.pyc`字节码文件，然后由Python虚拟机解释执行。
-   **JIT (Just-In-Time) 编译**: 这种技术试图结合编译型和解释型语言的优点。代码在运行时被动态地编译成机器码，通常只针对“热点”代码（频繁执行的部分），从而提高执行效率，同时保留解释型语言的部分灵活性。
-   **AOT (Ahead-Of-Time) 编译**: 一些原本是解释型或基于VM的语言也开始支持AOT编译，直接将源代码或字节码编译成本地机器码，以提高启动速度和峰值性能，减少运行时开销。
-   **语言规范 vs. 语言实现**: 严格来说，编译型或解释型是语言的一种实现方式，而不是语言本身的固有属性。例如，C语言通常被编译执行，但也存在C语言的解释器。反之，理论上也可以为Python写一个完整的AOT编译器。我们通常谈论的是该语言最主流或最典型的实现方式。

## 面试实战回答
### 标准回答
"编译型语言和解释型语言，它们最核心的区别在于源代码转换成机器能够执行的指令的**时机和方式**。

**编译型语言**，比如C++或Go，在程序运行之前，会有一个明确的‘编译’步骤。在这个步骤中，‘编译器’这个工具会把我们写的全部源代码一次性地转换成目标平台的机器码（或者是像Java那样的中间字节码），并生成一个可执行文件。之后，我们运行的是这个编译好的文件，CPU可以直接理解并执行这些机器码。所以，它的核心操作是‘**先完整翻译，后独立执行**’。这样做的好处通常是运行效率高，因为代码已经优化并转换成了机器直接认识的指令，而且很多错误能在编译阶段就被发现。

**解释型语言**，比如Python或JavaScript，它们通常不需要这个预先的、完整的编译步骤来生成可执行文件。而是通过一个叫做‘解释器’的程序，在程序运行时，逐行或者逐块地读取源代码，然后实时地把每一句代码翻译成机器指令并立即执行。所以，它的核心操作是‘**边翻译，边执行**’。这种方式的好处是开发效率高，修改代码后能立刻看到结果，调试也相对方便，而且通常具有更好的跨平台性，因为同一份源代码只要在有对应解释器的不同平台上就能运行。

简单总结一下，核心差异就是：编译型是‘一次编译，多次运行（编译产物）’，解释型是‘每次运行，每次解释（源代码）’。当然，现在很多语言比如Java或Python，它们会采用一些混合的策略，比如先编译成字节码，再由虚拟机解释执行，虚拟机内部可能还会有JIT（即时编译）技术来优化性能，这样就能结合两者的部分优点。"
', 'https://www.notion.so/images/page-cover/met_winslow_homer_maine_coast.jpg', '魂', 1233, 45, 1, null, 1, 1, 0, 1, 1, '2025-08-20 13:47:49', '2025-08-20 14:08:01');
INSERT INTO haha.pla_planet_post_article (id, post_id, content, cover_image, tags, word_count, reading_time, is_original, source_url, version, status, is_deleted, created_by, updated_by, created_at, updated_at) VALUES (3, 3, '## 核心要点
- **编译型语言定义**: 源代码在执行前，通过编译器一次性转换成目标机器码（或中间字节码），生成可执行文件或库。
- **解释型语言定义**: 源代码在运行时，通过解释器逐行（或逐块）翻译成机器指令并立即执行，不生成独立的可执行文件。
- **核心操作差异**:
    - **翻译时机**: 编译型是执行前（Ahead-of-Time），解释型是执行中（Runtime）。
    - **产物**: 编译型产生目标代码（机器码/字节码），解释型不直接产生持久化的目标代码（或产生临时的内部表示）。
    - **执行方式**: 编译型直接由操作系统/CPU（或虚拟机）执行目标代码，解释型需要解释器参与整个执行过程。
- **必须包含的核心概念**: 编译器、解释器、源代码、目标代码（机器码/字节码）、执行时机。
- **面试官最关注的技术要点**: 对“翻译”和“执行”这两个阶段如何分离或结合的理解，以及由此带来的性能、可移植性、开发效率等方面的差异。

## 知识点详解
### 概念解释
**编译型语言 (Compiled Language)**:
这类语言编写的程序在执行之前，需要一个称为“编译器”的专门程序进行处理。编译器会读取全部源代码，进行词法分析、语法分析、语义分析、优化等步骤，最终将源代码一次性转换成特定平台（如特定CPU架构和操作系统）的机器码，或者是一种中间代码（如Java的字节码）。这个转换后的代码通常保存在一个独立的可执行文件或库文件中。运行时，操作系统直接加载并执行这个机器码文件，或者由一个虚拟机执行中间代码。

**解释型语言 (Interpreted Language)**:
这类语言编写的程序不需要在执行前进行完整的编译过程生成独立的可执行文件。相反，源代码在运行时由一个称为“解释器”的程序逐行或逐块地读取、分析，并立即转换成机器指令（或某种内部表示）来执行。源代码和解释器在程序运行时都必须存在。

### 技术原理 (核心操作差异)

| 特性         | 编译型语言                                     | 解释型语言                                       |
| :----------- | :--------------------------------------------- | :----------------------------------------------- |
| **翻译时机** | **执行前 (Ahead-of-Time, AOT)**：源代码一次性完整翻译。 | **执行中 (Runtime)**：源代码逐行/逐块翻译并执行。  |
| **翻译工具** | 编译器 (Compiler)                              | 解释器 (Interpreter)                             |
| **产物**     | 目标代码 (机器码或中间字节码)，通常是独立文件。   | 通常不产生持久化的目标代码文件（或产生临时内部表示）。 |
| **执行过程** | 1. 编译：源代码 -> 目标代码。<br>2. 执行：操作系统/虚拟机直接运行目标代码。 | 1. 解释与执行：解释器读取源代码 -> 翻译 -> 立即执行。这两个动作交织进行。 |
| **运行时依赖** | 编译后通常不依赖编译器（除非是JIT编译的字节码需要VM）。 | 始终依赖解释器。                                 |
| **错误检测** | 大部分错误在编译阶段发现。                       | 错误通常在运行时才暴露（部分静态分析工具可在运行前发现一些错误）。 |
| **运行效率** | 通常较高，因为已翻译成优化过的机器码或高效字节码。 | 通常较低，因为有运行时翻译的开销。                 |
| **跨平台性** | 较差（若编译为机器码），需为不同平台分别编译。较好（若编译为字节码，如Java）。 | 通常较好，只要目标平台有相应的解释器即可运行同一份源代码。 |
| **开发效率/灵活性** | 编译耗时，修改后需重新编译。                   | 修改代码后可立即运行，调试方便，开发周期短。       |

**核心操作流程对比**:

*   **编译型语言**:
    1.  `源代码` --(编译器)--> `目标代码 (机器码/字节码)`
    2.  `目标代码` --(操作系统/虚拟机)--> `执行结果`
    *核心在于“先完整翻译，后独立执行”。*

*   **解释型语言**:
    1.  `源代码` --(解释器)-->(翻译一行/块 -> 执行一行/块)--> `执行结果`
    *核心在于“边翻译，边执行”。*

## 实际应用
### 使用场景
**编译型语言典型代表及场景**:
-   **C, C++**: 操作系统、游戏引擎、嵌入式系统、高性能计算等对性能要求极高的领域。
-   **Go, Rust**: 后端服务、系统工具、并发编程。
-   **Java, C#** (通常被认为是混合型，但其第一步是编译到字节码): 企业级应用、大型系统、Android应用(Java/Kotlin)。

**解释型语言典型代表及场景**:
-   **Python**: Web后端开发、脚本自动化、数据科学、人工智能、快速原型开发。
-   **JavaScript**: Web前端开发、Node.js后端开发、移动应用 (React Native, Ionic)。
-   **Ruby**: Web开发 (Ruby on Rails)。
-   **PHP**: Web后端开发。
-   **Shell脚本 (Bash, Zsh)**: 系统管理和自动化任务。

### 最佳实践
-   选择编译型语言通常是为了追求极致的运行性能、更早的错误发现和更小的运行时依赖（对于编译到原生机器码的语言）。
-   选择解释型语言通常是为了快速开发、便捷的跨平台性（代码层面）、动态性和灵活性。
-   许多现代语言或其主流实现采用混合策略（如Java、Python的CPython实现编译到字节码，再由虚拟机解释执行，并可能进行JIT编译）以结合两者的优点。

## 进阶思考
-   **混合型语言**: 许多语言（如Java, C#, Python）实际上是混合型的。例如，Java源代码先被编译成平台无关的字节码，然后由Java虚拟机（JVM）解释执行。JVM内部通常还包含JIT（Just-In-Time）编译器，它可以在运行时将频繁执行的字节码编译成本地机器码以提高性能。Python (CPython) 也是先将`.py`文件编译成`.pyc`字节码文件，然后由Python虚拟机解释执行。
-   **JIT (Just-In-Time) 编译**: 这种技术试图结合编译型和解释型语言的优点。代码在运行时被动态地编译成机器码，通常只针对“热点”代码（频繁执行的部分），从而提高执行效率，同时保留解释型语言的部分灵活性。
-   **AOT (Ahead-Of-Time) 编译**: 一些原本是解释型或基于VM的语言也开始支持AOT编译，直接将源代码或字节码编译成本地机器码，以提高启动速度和峰值性能，减少运行时开销。
-   **语言规范 vs. 语言实现**: 严格来说，编译型或解释型是语言的一种实现方式，而不是语言本身的固有属性。例如，C语言通常被编译执行，但也存在C语言的解释器。反之，理论上也可以为Python写一个完整的AOT编译器。我们通常谈论的是该语言最主流或最典型的实现方式。

## 面试实战回答
### 标准回答
"编译型语言和解释型语言，它们最核心的区别在于源代码转换成机器能够执行的指令的**时机和方式**。

**编译型语言**，比如C++或Go，在程序运行之前，会有一个明确的‘编译’步骤。在这个步骤中，‘编译器’这个工具会把我们写的全部源代码一次性地转换成目标平台的机器码（或者是像Java那样的中间字节码），并生成一个可执行文件。之后，我们运行的是这个编译好的文件，CPU可以直接理解并执行这些机器码。所以，它的核心操作是‘**先完整翻译，后独立执行**’。这样做的好处通常是运行效率高，因为代码已经优化并转换成了机器直接认识的指令，而且很多错误能在编译阶段就被发现。

**解释型语言**，比如Python或JavaScript，它们通常不需要这个预先的、完整的编译步骤来生成可执行文件。而是通过一个叫做‘解释器’的程序，在程序运行时，逐行或者逐块地读取源代码，然后实时地把每一句代码翻译成机器指令并立即执行。所以，它的核心操作是‘**边翻译，边执行**’。这种方式的好处是开发效率高，修改代码后能立刻看到结果，调试也相对方便，而且通常具有更好的跨平台性，因为同一份源代码只要在有对应解释器的不同平台上就能运行。

简单总结一下，核心差异就是：编译型是‘一次编译，多次运行（编译产物）’，解释型是‘每次运行，每次解释（源代码）’。当然，现在很多语言比如Java或Python，它们会采用一些混合的策略，比如先编译成字节码，再由虚拟机解释执行，虚拟机内部可能还会有JIT（即时编译）技术来优化性能，这样就能结合两者的部分优点。"
', 'https://www.notion.so/images/page-cover/met_winslow_homer_maine_coast.jpg', '魂', 1233, 45, 1, null, 1, 1, 0, 1, 1, '2025-08-20 13:47:49', '2025-08-20 14:08:01');
INSERT INTO haha.pla_planet_post_article (id, post_id, content, cover_image, tags, word_count, reading_time, is_original, source_url, version, status, is_deleted, created_by, updated_by, created_at, updated_at) VALUES (4, 4, '## 核心要点
- **编译型语言定义**: 源代码在执行前，通过编译器一次性转换成目标机器码（或中间字节码），生成可执行文件或库。
- **解释型语言定义**: 源代码在运行时，通过解释器逐行（或逐块）翻译成机器指令并立即执行，不生成独立的可执行文件。
- **核心操作差异**:
    - **翻译时机**: 编译型是执行前（Ahead-of-Time），解释型是执行中（Runtime）。
    - **产物**: 编译型产生目标代码（机器码/字节码），解释型不直接产生持久化的目标代码（或产生临时的内部表示）。
    - **执行方式**: 编译型直接由操作系统/CPU（或虚拟机）执行目标代码，解释型需要解释器参与整个执行过程。
- **必须包含的核心概念**: 编译器、解释器、源代码、目标代码（机器码/字节码）、执行时机。
- **面试官最关注的技术要点**: 对“翻译”和“执行”这两个阶段如何分离或结合的理解，以及由此带来的性能、可移植性、开发效率等方面的差异。

## 知识点详解
### 概念解释
**编译型语言 (Compiled Language)**:
这类语言编写的程序在执行之前，需要一个称为“编译器”的专门程序进行处理。编译器会读取全部源代码，进行词法分析、语法分析、语义分析、优化等步骤，最终将源代码一次性转换成特定平台（如特定CPU架构和操作系统）的机器码，或者是一种中间代码（如Java的字节码）。这个转换后的代码通常保存在一个独立的可执行文件或库文件中。运行时，操作系统直接加载并执行这个机器码文件，或者由一个虚拟机执行中间代码。

**解释型语言 (Interpreted Language)**:
这类语言编写的程序不需要在执行前进行完整的编译过程生成独立的可执行文件。相反，源代码在运行时由一个称为“解释器”的程序逐行或逐块地读取、分析，并立即转换成机器指令（或某种内部表示）来执行。源代码和解释器在程序运行时都必须存在。

### 技术原理 (核心操作差异)

| 特性         | 编译型语言                                     | 解释型语言                                       |
| :----------- | :--------------------------------------------- | :----------------------------------------------- |
| **翻译时机** | **执行前 (Ahead-of-Time, AOT)**：源代码一次性完整翻译。 | **执行中 (Runtime)**：源代码逐行/逐块翻译并执行。  |
| **翻译工具** | 编译器 (Compiler)                              | 解释器 (Interpreter)                             |
| **产物**     | 目标代码 (机器码或中间字节码)，通常是独立文件。   | 通常不产生持久化的目标代码文件（或产生临时内部表示）。 |
| **执行过程** | 1. 编译：源代码 -> 目标代码。<br>2. 执行：操作系统/虚拟机直接运行目标代码。 | 1. 解释与执行：解释器读取源代码 -> 翻译 -> 立即执行。这两个动作交织进行。 |
| **运行时依赖** | 编译后通常不依赖编译器（除非是JIT编译的字节码需要VM）。 | 始终依赖解释器。                                 |
| **错误检测** | 大部分错误在编译阶段发现。                       | 错误通常在运行时才暴露（部分静态分析工具可在运行前发现一些错误）。 |
| **运行效率** | 通常较高，因为已翻译成优化过的机器码或高效字节码。 | 通常较低，因为有运行时翻译的开销。                 |
| **跨平台性** | 较差（若编译为机器码），需为不同平台分别编译。较好（若编译为字节码，如Java）。 | 通常较好，只要目标平台有相应的解释器即可运行同一份源代码。 |
| **开发效率/灵活性** | 编译耗时，修改后需重新编译。                   | 修改代码后可立即运行，调试方便，开发周期短。       |

**核心操作流程对比**:

*   **编译型语言**:
    1.  `源代码` --(编译器)--> `目标代码 (机器码/字节码)`
    2.  `目标代码` --(操作系统/虚拟机)--> `执行结果`
    *核心在于“先完整翻译，后独立执行”。*

*   **解释型语言**:
    1.  `源代码` --(解释器)-->(翻译一行/块 -> 执行一行/块)--> `执行结果`
    *核心在于“边翻译，边执行”。*

## 实际应用
### 使用场景
**编译型语言典型代表及场景**:
-   **C, C++**: 操作系统、游戏引擎、嵌入式系统、高性能计算等对性能要求极高的领域。
-   **Go, Rust**: 后端服务、系统工具、并发编程。
-   **Java, C#** (通常被认为是混合型，但其第一步是编译到字节码): 企业级应用、大型系统、Android应用(Java/Kotlin)。

**解释型语言典型代表及场景**:
-   **Python**: Web后端开发、脚本自动化、数据科学、人工智能、快速原型开发。
-   **JavaScript**: Web前端开发、Node.js后端开发、移动应用 (React Native, Ionic)。
-   **Ruby**: Web开发 (Ruby on Rails)。
-   **PHP**: Web后端开发。
-   **Shell脚本 (Bash, Zsh)**: 系统管理和自动化任务。

### 最佳实践
-   选择编译型语言通常是为了追求极致的运行性能、更早的错误发现和更小的运行时依赖（对于编译到原生机器码的语言）。
-   选择解释型语言通常是为了快速开发、便捷的跨平台性（代码层面）、动态性和灵活性。
-   许多现代语言或其主流实现采用混合策略（如Java、Python的CPython实现编译到字节码，再由虚拟机解释执行，并可能进行JIT编译）以结合两者的优点。

## 进阶思考
-   **混合型语言**: 许多语言（如Java, C#, Python）实际上是混合型的。例如，Java源代码先被编译成平台无关的字节码，然后由Java虚拟机（JVM）解释执行。JVM内部通常还包含JIT（Just-In-Time）编译器，它可以在运行时将频繁执行的字节码编译成本地机器码以提高性能。Python (CPython) 也是先将`.py`文件编译成`.pyc`字节码文件，然后由Python虚拟机解释执行。
-   **JIT (Just-In-Time) 编译**: 这种技术试图结合编译型和解释型语言的优点。代码在运行时被动态地编译成机器码，通常只针对“热点”代码（频繁执行的部分），从而提高执行效率，同时保留解释型语言的部分灵活性。
-   **AOT (Ahead-Of-Time) 编译**: 一些原本是解释型或基于VM的语言也开始支持AOT编译，直接将源代码或字节码编译成本地机器码，以提高启动速度和峰值性能，减少运行时开销。
-   **语言规范 vs. 语言实现**: 严格来说，编译型或解释型是语言的一种实现方式，而不是语言本身的固有属性。例如，C语言通常被编译执行，但也存在C语言的解释器。反之，理论上也可以为Python写一个完整的AOT编译器。我们通常谈论的是该语言最主流或最典型的实现方式。

## 面试实战回答
### 标准回答
"编译型语言和解释型语言，它们最核心的区别在于源代码转换成机器能够执行的指令的**时机和方式**。

**编译型语言**，比如C++或Go，在程序运行之前，会有一个明确的‘编译’步骤。在这个步骤中，‘编译器’这个工具会把我们写的全部源代码一次性地转换成目标平台的机器码（或者是像Java那样的中间字节码），并生成一个可执行文件。之后，我们运行的是这个编译好的文件，CPU可以直接理解并执行这些机器码。所以，它的核心操作是‘**先完整翻译，后独立执行**’。这样做的好处通常是运行效率高，因为代码已经优化并转换成了机器直接认识的指令，而且很多错误能在编译阶段就被发现。

**解释型语言**，比如Python或JavaScript，它们通常不需要这个预先的、完整的编译步骤来生成可执行文件。而是通过一个叫做‘解释器’的程序，在程序运行时，逐行或者逐块地读取源代码，然后实时地把每一句代码翻译成机器指令并立即执行。所以，它的核心操作是‘**边翻译，边执行**’。这种方式的好处是开发效率高，修改代码后能立刻看到结果，调试也相对方便，而且通常具有更好的跨平台性，因为同一份源代码只要在有对应解释器的不同平台上就能运行。

简单总结一下，核心差异就是：编译型是‘一次编译，多次运行（编译产物）’，解释型是‘每次运行，每次解释（源代码）’。当然，现在很多语言比如Java或Python，它们会采用一些混合的策略，比如先编译成字节码，再由虚拟机解释执行，虚拟机内部可能还会有JIT（即时编译）技术来优化性能，这样就能结合两者的部分优点。"
', 'https://www.notion.so/images/page-cover/met_winslow_homer_maine_coast.jpg', '魂', 1233, 45, 1, null, 1, 1, 0, 1, 1, '2025-08-20 13:47:49', '2025-08-20 14:08:01');
INSERT INTO haha.pla_planet_post_article (id, post_id, content, cover_image, tags, word_count, reading_time, is_original, source_url, version, status, is_deleted, created_by, updated_by, created_at, updated_at) VALUES (5, 5, '## 核心要点
- **编译型语言定义**: 源代码在执行前，通过编译器一次性转换成目标机器码（或中间字节码），生成可执行文件或库。
- **解释型语言定义**: 源代码在运行时，通过解释器逐行（或逐块）翻译成机器指令并立即执行，不生成独立的可执行文件。
- **核心操作差异**:
    - **翻译时机**: 编译型是执行前（Ahead-of-Time），解释型是执行中（Runtime）。
    - **产物**: 编译型产生目标代码（机器码/字节码），解释型不直接产生持久化的目标代码（或产生临时的内部表示）。
    - **执行方式**: 编译型直接由操作系统/CPU（或虚拟机）执行目标代码，解释型需要解释器参与整个执行过程。
- **必须包含的核心概念**: 编译器、解释器、源代码、目标代码（机器码/字节码）、执行时机。
- **面试官最关注的技术要点**: 对“翻译”和“执行”这两个阶段如何分离或结合的理解，以及由此带来的性能、可移植性、开发效率等方面的差异。

## 知识点详解
### 概念解释
**编译型语言 (Compiled Language)**:
这类语言编写的程序在执行之前，需要一个称为“编译器”的专门程序进行处理。编译器会读取全部源代码，进行词法分析、语法分析、语义分析、优化等步骤，最终将源代码一次性转换成特定平台（如特定CPU架构和操作系统）的机器码，或者是一种中间代码（如Java的字节码）。这个转换后的代码通常保存在一个独立的可执行文件或库文件中。运行时，操作系统直接加载并执行这个机器码文件，或者由一个虚拟机执行中间代码。

**解释型语言 (Interpreted Language)**:
这类语言编写的程序不需要在执行前进行完整的编译过程生成独立的可执行文件。相反，源代码在运行时由一个称为“解释器”的程序逐行或逐块地读取、分析，并立即转换成机器指令（或某种内部表示）来执行。源代码和解释器在程序运行时都必须存在。

### 技术原理 (核心操作差异)

| 特性         | 编译型语言                                     | 解释型语言                                       |
| :----------- | :--------------------------------------------- | :----------------------------------------------- |
| **翻译时机** | **执行前 (Ahead-of-Time, AOT)**：源代码一次性完整翻译。 | **执行中 (Runtime)**：源代码逐行/逐块翻译并执行。  |
| **翻译工具** | 编译器 (Compiler)                              | 解释器 (Interpreter)                             |
| **产物**     | 目标代码 (机器码或中间字节码)，通常是独立文件。   | 通常不产生持久化的目标代码文件（或产生临时内部表示）。 |
| **执行过程** | 1. 编译：源代码 -> 目标代码。<br>2. 执行：操作系统/虚拟机直接运行目标代码。 | 1. 解释与执行：解释器读取源代码 -> 翻译 -> 立即执行。这两个动作交织进行。 |
| **运行时依赖** | 编译后通常不依赖编译器（除非是JIT编译的字节码需要VM）。 | 始终依赖解释器。                                 |
| **错误检测** | 大部分错误在编译阶段发现。                       | 错误通常在运行时才暴露（部分静态分析工具可在运行前发现一些错误）。 |
| **运行效率** | 通常较高，因为已翻译成优化过的机器码或高效字节码。 | 通常较低，因为有运行时翻译的开销。                 |
| **跨平台性** | 较差（若编译为机器码），需为不同平台分别编译。较好（若编译为字节码，如Java）。 | 通常较好，只要目标平台有相应的解释器即可运行同一份源代码。 |
| **开发效率/灵活性** | 编译耗时，修改后需重新编译。                   | 修改代码后可立即运行，调试方便，开发周期短。       |

**核心操作流程对比**:

*   **编译型语言**:
    1.  `源代码` --(编译器)--> `目标代码 (机器码/字节码)`
    2.  `目标代码` --(操作系统/虚拟机)--> `执行结果`
    *核心在于“先完整翻译，后独立执行”。*

*   **解释型语言**:
    1.  `源代码` --(解释器)-->(翻译一行/块 -> 执行一行/块)--> `执行结果`
    *核心在于“边翻译，边执行”。*

## 实际应用
### 使用场景
**编译型语言典型代表及场景**:
-   **C, C++**: 操作系统、游戏引擎、嵌入式系统、高性能计算等对性能要求极高的领域。
-   **Go, Rust**: 后端服务、系统工具、并发编程。
-   **Java, C#** (通常被认为是混合型，但其第一步是编译到字节码): 企业级应用、大型系统、Android应用(Java/Kotlin)。

**解释型语言典型代表及场景**:
-   **Python**: Web后端开发、脚本自动化、数据科学、人工智能、快速原型开发。
-   **JavaScript**: Web前端开发、Node.js后端开发、移动应用 (React Native, Ionic)。
-   **Ruby**: Web开发 (Ruby on Rails)。
-   **PHP**: Web后端开发。
-   **Shell脚本 (Bash, Zsh)**: 系统管理和自动化任务。

### 最佳实践
-   选择编译型语言通常是为了追求极致的运行性能、更早的错误发现和更小的运行时依赖（对于编译到原生机器码的语言）。
-   选择解释型语言通常是为了快速开发、便捷的跨平台性（代码层面）、动态性和灵活性。
-   许多现代语言或其主流实现采用混合策略（如Java、Python的CPython实现编译到字节码，再由虚拟机解释执行，并可能进行JIT编译）以结合两者的优点。

## 进阶思考
-   **混合型语言**: 许多语言（如Java, C#, Python）实际上是混合型的。例如，Java源代码先被编译成平台无关的字节码，然后由Java虚拟机（JVM）解释执行。JVM内部通常还包含JIT（Just-In-Time）编译器，它可以在运行时将频繁执行的字节码编译成本地机器码以提高性能。Python (CPython) 也是先将`.py`文件编译成`.pyc`字节码文件，然后由Python虚拟机解释执行。
-   **JIT (Just-In-Time) 编译**: 这种技术试图结合编译型和解释型语言的优点。代码在运行时被动态地编译成机器码，通常只针对“热点”代码（频繁执行的部分），从而提高执行效率，同时保留解释型语言的部分灵活性。
-   **AOT (Ahead-Of-Time) 编译**: 一些原本是解释型或基于VM的语言也开始支持AOT编译，直接将源代码或字节码编译成本地机器码，以提高启动速度和峰值性能，减少运行时开销。
-   **语言规范 vs. 语言实现**: 严格来说，编译型或解释型是语言的一种实现方式，而不是语言本身的固有属性。例如，C语言通常被编译执行，但也存在C语言的解释器。反之，理论上也可以为Python写一个完整的AOT编译器。我们通常谈论的是该语言最主流或最典型的实现方式。

## 面试实战回答
### 标准回答
"编译型语言和解释型语言，它们最核心的区别在于源代码转换成机器能够执行的指令的**时机和方式**。

**编译型语言**，比如C++或Go，在程序运行之前，会有一个明确的‘编译’步骤。在这个步骤中，‘编译器’这个工具会把我们写的全部源代码一次性地转换成目标平台的机器码（或者是像Java那样的中间字节码），并生成一个可执行文件。之后，我们运行的是这个编译好的文件，CPU可以直接理解并执行这些机器码。所以，它的核心操作是‘**先完整翻译，后独立执行**’。这样做的好处通常是运行效率高，因为代码已经优化并转换成了机器直接认识的指令，而且很多错误能在编译阶段就被发现。

**解释型语言**，比如Python或JavaScript，它们通常不需要这个预先的、完整的编译步骤来生成可执行文件。而是通过一个叫做‘解释器’的程序，在程序运行时，逐行或者逐块地读取源代码，然后实时地把每一句代码翻译成机器指令并立即执行。所以，它的核心操作是‘**边翻译，边执行**’。这种方式的好处是开发效率高，修改代码后能立刻看到结果，调试也相对方便，而且通常具有更好的跨平台性，因为同一份源代码只要在有对应解释器的不同平台上就能运行。

简单总结一下，核心差异就是：编译型是‘一次编译，多次运行（编译产物）’，解释型是‘每次运行，每次解释（源代码）’。当然，现在很多语言比如Java或Python，它们会采用一些混合的策略，比如先编译成字节码，再由虚拟机解释执行，虚拟机内部可能还会有JIT（即时编译）技术来优化性能，这样就能结合两者的部分优点。"
', 'https://www.notion.so/images/page-cover/met_winslow_homer_maine_coast.jpg', '魂', 1233, 45, 1, null, 1, 1, 0, 1, 1, '2025-08-20 13:47:49', '2025-08-20 14:08:01');
INSERT INTO haha.pla_planet_post_article (id, post_id, content, cover_image, tags, word_count, reading_time, is_original, source_url, version, status, is_deleted, created_by, updated_by, created_at, updated_at) VALUES (6, 6, '## 核心要点
- **编译型语言定义**: 源代码在执行前，通过编译器一次性转换成目标机器码（或中间字节码），生成可执行文件或库。
- **解释型语言定义**: 源代码在运行时，通过解释器逐行（或逐块）翻译成机器指令并立即执行，不生成独立的可执行文件。
- **核心操作差异**:
    - **翻译时机**: 编译型是执行前（Ahead-of-Time），解释型是执行中（Runtime）。
    - **产物**: 编译型产生目标代码（机器码/字节码），解释型不直接产生持久化的目标代码（或产生临时的内部表示）。
    - **执行方式**: 编译型直接由操作系统/CPU（或虚拟机）执行目标代码，解释型需要解释器参与整个执行过程。
- **必须包含的核心概念**: 编译器、解释器、源代码、目标代码（机器码/字节码）、执行时机。
- **面试官最关注的技术要点**: 对“翻译”和“执行”这两个阶段如何分离或结合的理解，以及由此带来的性能、可移植性、开发效率等方面的差异。

## 知识点详解
### 概念解释
**编译型语言 (Compiled Language)**:
这类语言编写的程序在执行之前，需要一个称为“编译器”的专门程序进行处理。编译器会读取全部源代码，进行词法分析、语法分析、语义分析、优化等步骤，最终将源代码一次性转换成特定平台（如特定CPU架构和操作系统）的机器码，或者是一种中间代码（如Java的字节码）。这个转换后的代码通常保存在一个独立的可执行文件或库文件中。运行时，操作系统直接加载并执行这个机器码文件，或者由一个虚拟机执行中间代码。

**解释型语言 (Interpreted Language)**:
这类语言编写的程序不需要在执行前进行完整的编译过程生成独立的可执行文件。相反，源代码在运行时由一个称为“解释器”的程序逐行或逐块地读取、分析，并立即转换成机器指令（或某种内部表示）来执行。源代码和解释器在程序运行时都必须存在。

### 技术原理 (核心操作差异)

| 特性         | 编译型语言                                     | 解释型语言                                       |
| :----------- | :--------------------------------------------- | :----------------------------------------------- |
| **翻译时机** | **执行前 (Ahead-of-Time, AOT)**：源代码一次性完整翻译。 | **执行中 (Runtime)**：源代码逐行/逐块翻译并执行。  |
| **翻译工具** | 编译器 (Compiler)                              | 解释器 (Interpreter)                             |
| **产物**     | 目标代码 (机器码或中间字节码)，通常是独立文件。   | 通常不产生持久化的目标代码文件（或产生临时内部表示）。 |
| **执行过程** | 1. 编译：源代码 -> 目标代码。<br>2. 执行：操作系统/虚拟机直接运行目标代码。 | 1. 解释与执行：解释器读取源代码 -> 翻译 -> 立即执行。这两个动作交织进行。 |
| **运行时依赖** | 编译后通常不依赖编译器（除非是JIT编译的字节码需要VM）。 | 始终依赖解释器。                                 |
| **错误检测** | 大部分错误在编译阶段发现。                       | 错误通常在运行时才暴露（部分静态分析工具可在运行前发现一些错误）。 |
| **运行效率** | 通常较高，因为已翻译成优化过的机器码或高效字节码。 | 通常较低，因为有运行时翻译的开销。                 |
| **跨平台性** | 较差（若编译为机器码），需为不同平台分别编译。较好（若编译为字节码，如Java）。 | 通常较好，只要目标平台有相应的解释器即可运行同一份源代码。 |
| **开发效率/灵活性** | 编译耗时，修改后需重新编译。                   | 修改代码后可立即运行，调试方便，开发周期短。       |

**核心操作流程对比**:

*   **编译型语言**:
    1.  `源代码` --(编译器)--> `目标代码 (机器码/字节码)`
    2.  `目标代码` --(操作系统/虚拟机)--> `执行结果`
    *核心在于“先完整翻译，后独立执行”。*

*   **解释型语言**:
    1.  `源代码` --(解释器)-->(翻译一行/块 -> 执行一行/块)--> `执行结果`
    *核心在于“边翻译，边执行”。*

## 实际应用
### 使用场景
**编译型语言典型代表及场景**:
-   **C, C++**: 操作系统、游戏引擎、嵌入式系统、高性能计算等对性能要求极高的领域。
-   **Go, Rust**: 后端服务、系统工具、并发编程。
-   **Java, C#** (通常被认为是混合型，但其第一步是编译到字节码): 企业级应用、大型系统、Android应用(Java/Kotlin)。

**解释型语言典型代表及场景**:
-   **Python**: Web后端开发、脚本自动化、数据科学、人工智能、快速原型开发。
-   **JavaScript**: Web前端开发、Node.js后端开发、移动应用 (React Native, Ionic)。
-   **Ruby**: Web开发 (Ruby on Rails)。
-   **PHP**: Web后端开发。
-   **Shell脚本 (Bash, Zsh)**: 系统管理和自动化任务。

### 最佳实践
-   选择编译型语言通常是为了追求极致的运行性能、更早的错误发现和更小的运行时依赖（对于编译到原生机器码的语言）。
-   选择解释型语言通常是为了快速开发、便捷的跨平台性（代码层面）、动态性和灵活性。
-   许多现代语言或其主流实现采用混合策略（如Java、Python的CPython实现编译到字节码，再由虚拟机解释执行，并可能进行JIT编译）以结合两者的优点。

## 进阶思考
-   **混合型语言**: 许多语言（如Java, C#, Python）实际上是混合型的。例如，Java源代码先被编译成平台无关的字节码，然后由Java虚拟机（JVM）解释执行。JVM内部通常还包含JIT（Just-In-Time）编译器，它可以在运行时将频繁执行的字节码编译成本地机器码以提高性能。Python (CPython) 也是先将`.py`文件编译成`.pyc`字节码文件，然后由Python虚拟机解释执行。
-   **JIT (Just-In-Time) 编译**: 这种技术试图结合编译型和解释型语言的优点。代码在运行时被动态地编译成机器码，通常只针对“热点”代码（频繁执行的部分），从而提高执行效率，同时保留解释型语言的部分灵活性。
-   **AOT (Ahead-Of-Time) 编译**: 一些原本是解释型或基于VM的语言也开始支持AOT编译，直接将源代码或字节码编译成本地机器码，以提高启动速度和峰值性能，减少运行时开销。
-   **语言规范 vs. 语言实现**: 严格来说，编译型或解释型是语言的一种实现方式，而不是语言本身的固有属性。例如，C语言通常被编译执行，但也存在C语言的解释器。反之，理论上也可以为Python写一个完整的AOT编译器。我们通常谈论的是该语言最主流或最典型的实现方式。

## 面试实战回答
### 标准回答
"编译型语言和解释型语言，它们最核心的区别在于源代码转换成机器能够执行的指令的**时机和方式**。

**编译型语言**，比如C++或Go，在程序运行之前，会有一个明确的‘编译’步骤。在这个步骤中，‘编译器’这个工具会把我们写的全部源代码一次性地转换成目标平台的机器码（或者是像Java那样的中间字节码），并生成一个可执行文件。之后，我们运行的是这个编译好的文件，CPU可以直接理解并执行这些机器码。所以，它的核心操作是‘**先完整翻译，后独立执行**’。这样做的好处通常是运行效率高，因为代码已经优化并转换成了机器直接认识的指令，而且很多错误能在编译阶段就被发现。

**解释型语言**，比如Python或JavaScript，它们通常不需要这个预先的、完整的编译步骤来生成可执行文件。而是通过一个叫做‘解释器’的程序，在程序运行时，逐行或者逐块地读取源代码，然后实时地把每一句代码翻译成机器指令并立即执行。所以，它的核心操作是‘**边翻译，边执行**’。这种方式的好处是开发效率高，修改代码后能立刻看到结果，调试也相对方便，而且通常具有更好的跨平台性，因为同一份源代码只要在有对应解释器的不同平台上就能运行。

简单总结一下，核心差异就是：编译型是‘一次编译，多次运行（编译产物）’，解释型是‘每次运行，每次解释（源代码）’。当然，现在很多语言比如Java或Python，它们会采用一些混合的策略，比如先编译成字节码，再由虚拟机解释执行，虚拟机内部可能还会有JIT（即时编译）技术来优化性能，这样就能结合两者的部分优点。"
', 'https://www.notion.so/images/page-cover/met_winslow_homer_maine_coast.jpg', '魂', 1233, 45, 1, null, 1, 1, 0, 1, 1, '2025-08-20 13:47:49', '2025-08-20 14:08:01');
INSERT INTO haha.pla_planet_post_article (id, post_id, content, cover_image, tags, word_count, reading_time, is_original, source_url, version, status, is_deleted, created_by, updated_by, created_at, updated_at) VALUES (7, 7, '## 核心要点
- **编译型语言定义**: 源代码在执行前，通过编译器一次性转换成目标机器码（或中间字节码），生成可执行文件或库。
- **解释型语言定义**: 源代码在运行时，通过解释器逐行（或逐块）翻译成机器指令并立即执行，不生成独立的可执行文件。
- **核心操作差异**:
    - **翻译时机**: 编译型是执行前（Ahead-of-Time），解释型是执行中（Runtime）。
    - **产物**: 编译型产生目标代码（机器码/字节码），解释型不直接产生持久化的目标代码（或产生临时的内部表示）。
    - **执行方式**: 编译型直接由操作系统/CPU（或虚拟机）执行目标代码，解释型需要解释器参与整个执行过程。
- **必须包含的核心概念**: 编译器、解释器、源代码、目标代码（机器码/字节码）、执行时机。
- **面试官最关注的技术要点**: 对“翻译”和“执行”这两个阶段如何分离或结合的理解，以及由此带来的性能、可移植性、开发效率等方面的差异。

## 知识点详解
### 概念解释
**编译型语言 (Compiled Language)**:
这类语言编写的程序在执行之前，需要一个称为“编译器”的专门程序进行处理。编译器会读取全部源代码，进行词法分析、语法分析、语义分析、优化等步骤，最终将源代码一次性转换成特定平台（如特定CPU架构和操作系统）的机器码，或者是一种中间代码（如Java的字节码）。这个转换后的代码通常保存在一个独立的可执行文件或库文件中。运行时，操作系统直接加载并执行这个机器码文件，或者由一个虚拟机执行中间代码。

**解释型语言 (Interpreted Language)**:
这类语言编写的程序不需要在执行前进行完整的编译过程生成独立的可执行文件。相反，源代码在运行时由一个称为“解释器”的程序逐行或逐块地读取、分析，并立即转换成机器指令（或某种内部表示）来执行。源代码和解释器在程序运行时都必须存在。

### 技术原理 (核心操作差异)

| 特性         | 编译型语言                                     | 解释型语言                                       |
| :----------- | :--------------------------------------------- | :----------------------------------------------- |
| **翻译时机** | **执行前 (Ahead-of-Time, AOT)**：源代码一次性完整翻译。 | **执行中 (Runtime)**：源代码逐行/逐块翻译并执行。  |
| **翻译工具** | 编译器 (Compiler)                              | 解释器 (Interpreter)                             |
| **产物**     | 目标代码 (机器码或中间字节码)，通常是独立文件。   | 通常不产生持久化的目标代码文件（或产生临时内部表示）。 |
| **执行过程** | 1. 编译：源代码 -> 目标代码。<br>2. 执行：操作系统/虚拟机直接运行目标代码。 | 1. 解释与执行：解释器读取源代码 -> 翻译 -> 立即执行。这两个动作交织进行。 |
| **运行时依赖** | 编译后通常不依赖编译器（除非是JIT编译的字节码需要VM）。 | 始终依赖解释器。                                 |
| **错误检测** | 大部分错误在编译阶段发现。                       | 错误通常在运行时才暴露（部分静态分析工具可在运行前发现一些错误）。 |
| **运行效率** | 通常较高，因为已翻译成优化过的机器码或高效字节码。 | 通常较低，因为有运行时翻译的开销。                 |
| **跨平台性** | 较差（若编译为机器码），需为不同平台分别编译。较好（若编译为字节码，如Java）。 | 通常较好，只要目标平台有相应的解释器即可运行同一份源代码。 |
| **开发效率/灵活性** | 编译耗时，修改后需重新编译。                   | 修改代码后可立即运行，调试方便，开发周期短。       |

**核心操作流程对比**:

*   **编译型语言**:
    1.  `源代码` --(编译器)--> `目标代码 (机器码/字节码)`
    2.  `目标代码` --(操作系统/虚拟机)--> `执行结果`
    *核心在于“先完整翻译，后独立执行”。*

*   **解释型语言**:
    1.  `源代码` --(解释器)-->(翻译一行/块 -> 执行一行/块)--> `执行结果`
    *核心在于“边翻译，边执行”。*

## 实际应用
### 使用场景
**编译型语言典型代表及场景**:
-   **C, C++**: 操作系统、游戏引擎、嵌入式系统、高性能计算等对性能要求极高的领域。
-   **Go, Rust**: 后端服务、系统工具、并发编程。
-   **Java, C#** (通常被认为是混合型，但其第一步是编译到字节码): 企业级应用、大型系统、Android应用(Java/Kotlin)。

**解释型语言典型代表及场景**:
-   **Python**: Web后端开发、脚本自动化、数据科学、人工智能、快速原型开发。
-   **JavaScript**: Web前端开发、Node.js后端开发、移动应用 (React Native, Ionic)。
-   **Ruby**: Web开发 (Ruby on Rails)。
-   **PHP**: Web后端开发。
-   **Shell脚本 (Bash, Zsh)**: 系统管理和自动化任务。

### 最佳实践
-   选择编译型语言通常是为了追求极致的运行性能、更早的错误发现和更小的运行时依赖（对于编译到原生机器码的语言）。
-   选择解释型语言通常是为了快速开发、便捷的跨平台性（代码层面）、动态性和灵活性。
-   许多现代语言或其主流实现采用混合策略（如Java、Python的CPython实现编译到字节码，再由虚拟机解释执行，并可能进行JIT编译）以结合两者的优点。

## 进阶思考
-   **混合型语言**: 许多语言（如Java, C#, Python）实际上是混合型的。例如，Java源代码先被编译成平台无关的字节码，然后由Java虚拟机（JVM）解释执行。JVM内部通常还包含JIT（Just-In-Time）编译器，它可以在运行时将频繁执行的字节码编译成本地机器码以提高性能。Python (CPython) 也是先将`.py`文件编译成`.pyc`字节码文件，然后由Python虚拟机解释执行。
-   **JIT (Just-In-Time) 编译**: 这种技术试图结合编译型和解释型语言的优点。代码在运行时被动态地编译成机器码，通常只针对“热点”代码（频繁执行的部分），从而提高执行效率，同时保留解释型语言的部分灵活性。
-   **AOT (Ahead-Of-Time) 编译**: 一些原本是解释型或基于VM的语言也开始支持AOT编译，直接将源代码或字节码编译成本地机器码，以提高启动速度和峰值性能，减少运行时开销。
-   **语言规范 vs. 语言实现**: 严格来说，编译型或解释型是语言的一种实现方式，而不是语言本身的固有属性。例如，C语言通常被编译执行，但也存在C语言的解释器。反之，理论上也可以为Python写一个完整的AOT编译器。我们通常谈论的是该语言最主流或最典型的实现方式。

## 面试实战回答
### 标准回答
"编译型语言和解释型语言，它们最核心的区别在于源代码转换成机器能够执行的指令的**时机和方式**。

**编译型语言**，比如C++或Go，在程序运行之前，会有一个明确的‘编译’步骤。在这个步骤中，‘编译器’这个工具会把我们写的全部源代码一次性地转换成目标平台的机器码（或者是像Java那样的中间字节码），并生成一个可执行文件。之后，我们运行的是这个编译好的文件，CPU可以直接理解并执行这些机器码。所以，它的核心操作是‘**先完整翻译，后独立执行**’。这样做的好处通常是运行效率高，因为代码已经优化并转换成了机器直接认识的指令，而且很多错误能在编译阶段就被发现。

**解释型语言**，比如Python或JavaScript，它们通常不需要这个预先的、完整的编译步骤来生成可执行文件。而是通过一个叫做‘解释器’的程序，在程序运行时，逐行或者逐块地读取源代码，然后实时地把每一句代码翻译成机器指令并立即执行。所以，它的核心操作是‘**边翻译，边执行**’。这种方式的好处是开发效率高，修改代码后能立刻看到结果，调试也相对方便，而且通常具有更好的跨平台性，因为同一份源代码只要在有对应解释器的不同平台上就能运行。

简单总结一下，核心差异就是：编译型是‘一次编译，多次运行（编译产物）’，解释型是‘每次运行，每次解释（源代码）’。当然，现在很多语言比如Java或Python，它们会采用一些混合的策略，比如先编译成字节码，再由虚拟机解释执行，虚拟机内部可能还会有JIT（即时编译）技术来优化性能，这样就能结合两者的部分优点。"
', 'https://www.notion.so/images/page-cover/met_winslow_homer_maine_coast.jpg', '魂', 1233, 45, 1, null, 1, 1, 0, 1, 1, '2025-08-20 13:47:49', '2025-08-20 14:08:01');
INSERT INTO haha.pla_planet_post_article (id, post_id, content, cover_image, tags, word_count, reading_time, is_original, source_url, version, status, is_deleted, created_by, updated_by, created_at, updated_at) VALUES (8, 8, '## 核心要点
- **编译型语言定义**: 源代码在执行前，通过编译器一次性转换成目标机器码（或中间字节码），生成可执行文件或库。
- **解释型语言定义**: 源代码在运行时，通过解释器逐行（或逐块）翻译成机器指令并立即执行，不生成独立的可执行文件。
- **核心操作差异**:
    - **翻译时机**: 编译型是执行前（Ahead-of-Time），解释型是执行中（Runtime）。
    - **产物**: 编译型产生目标代码（机器码/字节码），解释型不直接产生持久化的目标代码（或产生临时的内部表示）。
    - **执行方式**: 编译型直接由操作系统/CPU（或虚拟机）执行目标代码，解释型需要解释器参与整个执行过程。
- **必须包含的核心概念**: 编译器、解释器、源代码、目标代码（机器码/字节码）、执行时机。
- **面试官最关注的技术要点**: 对“翻译”和“执行”这两个阶段如何分离或结合的理解，以及由此带来的性能、可移植性、开发效率等方面的差异。

## 知识点详解
### 概念解释
**编译型语言 (Compiled Language)**:
这类语言编写的程序在执行之前，需要一个称为“编译器”的专门程序进行处理。编译器会读取全部源代码，进行词法分析、语法分析、语义分析、优化等步骤，最终将源代码一次性转换成特定平台（如特定CPU架构和操作系统）的机器码，或者是一种中间代码（如Java的字节码）。这个转换后的代码通常保存在一个独立的可执行文件或库文件中。运行时，操作系统直接加载并执行这个机器码文件，或者由一个虚拟机执行中间代码。

**解释型语言 (Interpreted Language)**:
这类语言编写的程序不需要在执行前进行完整的编译过程生成独立的可执行文件。相反，源代码在运行时由一个称为“解释器”的程序逐行或逐块地读取、分析，并立即转换成机器指令（或某种内部表示）来执行。源代码和解释器在程序运行时都必须存在。

### 技术原理 (核心操作差异)

| 特性         | 编译型语言                                     | 解释型语言                                       |
| :----------- | :--------------------------------------------- | :----------------------------------------------- |
| **翻译时机** | **执行前 (Ahead-of-Time, AOT)**：源代码一次性完整翻译。 | **执行中 (Runtime)**：源代码逐行/逐块翻译并执行。  |
| **翻译工具** | 编译器 (Compiler)                              | 解释器 (Interpreter)                             |
| **产物**     | 目标代码 (机器码或中间字节码)，通常是独立文件。   | 通常不产生持久化的目标代码文件（或产生临时内部表示）。 |
| **执行过程** | 1. 编译：源代码 -> 目标代码。<br>2. 执行：操作系统/虚拟机直接运行目标代码。 | 1. 解释与执行：解释器读取源代码 -> 翻译 -> 立即执行。这两个动作交织进行。 |
| **运行时依赖** | 编译后通常不依赖编译器（除非是JIT编译的字节码需要VM）。 | 始终依赖解释器。                                 |
| **错误检测** | 大部分错误在编译阶段发现。                       | 错误通常在运行时才暴露（部分静态分析工具可在运行前发现一些错误）。 |
| **运行效率** | 通常较高，因为已翻译成优化过的机器码或高效字节码。 | 通常较低，因为有运行时翻译的开销。                 |
| **跨平台性** | 较差（若编译为机器码），需为不同平台分别编译。较好（若编译为字节码，如Java）。 | 通常较好，只要目标平台有相应的解释器即可运行同一份源代码。 |
| **开发效率/灵活性** | 编译耗时，修改后需重新编译。                   | 修改代码后可立即运行，调试方便，开发周期短。       |

**核心操作流程对比**:

*   **编译型语言**:
    1.  `源代码` --(编译器)--> `目标代码 (机器码/字节码)`
    2.  `目标代码` --(操作系统/虚拟机)--> `执行结果`
    *核心在于“先完整翻译，后独立执行”。*

*   **解释型语言**:
    1.  `源代码` --(解释器)-->(翻译一行/块 -> 执行一行/块)--> `执行结果`
    *核心在于“边翻译，边执行”。*

## 实际应用
### 使用场景
**编译型语言典型代表及场景**:
-   **C, C++**: 操作系统、游戏引擎、嵌入式系统、高性能计算等对性能要求极高的领域。
-   **Go, Rust**: 后端服务、系统工具、并发编程。
-   **Java, C#** (通常被认为是混合型，但其第一步是编译到字节码): 企业级应用、大型系统、Android应用(Java/Kotlin)。

**解释型语言典型代表及场景**:
-   **Python**: Web后端开发、脚本自动化、数据科学、人工智能、快速原型开发。
-   **JavaScript**: Web前端开发、Node.js后端开发、移动应用 (React Native, Ionic)。
-   **Ruby**: Web开发 (Ruby on Rails)。
-   **PHP**: Web后端开发。
-   **Shell脚本 (Bash, Zsh)**: 系统管理和自动化任务。

### 最佳实践
-   选择编译型语言通常是为了追求极致的运行性能、更早的错误发现和更小的运行时依赖（对于编译到原生机器码的语言）。
-   选择解释型语言通常是为了快速开发、便捷的跨平台性（代码层面）、动态性和灵活性。
-   许多现代语言或其主流实现采用混合策略（如Java、Python的CPython实现编译到字节码，再由虚拟机解释执行，并可能进行JIT编译）以结合两者的优点。

## 进阶思考
-   **混合型语言**: 许多语言（如Java, C#, Python）实际上是混合型的。例如，Java源代码先被编译成平台无关的字节码，然后由Java虚拟机（JVM）解释执行。JVM内部通常还包含JIT（Just-In-Time）编译器，它可以在运行时将频繁执行的字节码编译成本地机器码以提高性能。Python (CPython) 也是先将`.py`文件编译成`.pyc`字节码文件，然后由Python虚拟机解释执行。
-   **JIT (Just-In-Time) 编译**: 这种技术试图结合编译型和解释型语言的优点。代码在运行时被动态地编译成机器码，通常只针对“热点”代码（频繁执行的部分），从而提高执行效率，同时保留解释型语言的部分灵活性。
-   **AOT (Ahead-Of-Time) 编译**: 一些原本是解释型或基于VM的语言也开始支持AOT编译，直接将源代码或字节码编译成本地机器码，以提高启动速度和峰值性能，减少运行时开销。
-   **语言规范 vs. 语言实现**: 严格来说，编译型或解释型是语言的一种实现方式，而不是语言本身的固有属性。例如，C语言通常被编译执行，但也存在C语言的解释器。反之，理论上也可以为Python写一个完整的AOT编译器。我们通常谈论的是该语言最主流或最典型的实现方式。

## 面试实战回答
### 标准回答
"编译型语言和解释型语言，它们最核心的区别在于源代码转换成机器能够执行的指令的**时机和方式**。

**编译型语言**，比如C++或Go，在程序运行之前，会有一个明确的‘编译’步骤。在这个步骤中，‘编译器’这个工具会把我们写的全部源代码一次性地转换成目标平台的机器码（或者是像Java那样的中间字节码），并生成一个可执行文件。之后，我们运行的是这个编译好的文件，CPU可以直接理解并执行这些机器码。所以，它的核心操作是‘**先完整翻译，后独立执行**’。这样做的好处通常是运行效率高，因为代码已经优化并转换成了机器直接认识的指令，而且很多错误能在编译阶段就被发现。

**解释型语言**，比如Python或JavaScript，它们通常不需要这个预先的、完整的编译步骤来生成可执行文件。而是通过一个叫做‘解释器’的程序，在程序运行时，逐行或者逐块地读取源代码，然后实时地把每一句代码翻译成机器指令并立即执行。所以，它的核心操作是‘**边翻译，边执行**’。这种方式的好处是开发效率高，修改代码后能立刻看到结果，调试也相对方便，而且通常具有更好的跨平台性，因为同一份源代码只要在有对应解释器的不同平台上就能运行。

简单总结一下，核心差异就是：编译型是‘一次编译，多次运行（编译产物）’，解释型是‘每次运行，每次解释（源代码）’。当然，现在很多语言比如Java或Python，它们会采用一些混合的策略，比如先编译成字节码，再由虚拟机解释执行，虚拟机内部可能还会有JIT（即时编译）技术来优化性能，这样就能结合两者的部分优点。"
', 'https://www.notion.so/images/page-cover/met_winslow_homer_maine_coast.jpg', '魂', 1233, 45, 1, null, 1, 1, 0, 1, 1, '2025-08-20 13:47:49', '2025-08-20 14:08:01');
INSERT INTO haha.pla_planet_post_article (id, post_id, content, cover_image, tags, word_count, reading_time, is_original, source_url, version, status, is_deleted, created_by, updated_by, created_at, updated_at) VALUES (9, 9, '## 核心要点
- **编译型语言定义**: 源代码在执行前，通过编译器一次性转换成目标机器码（或中间字节码），生成可执行文件或库。
- **解释型语言定义**: 源代码在运行时，通过解释器逐行（或逐块）翻译成机器指令并立即执行，不生成独立的可执行文件。
- **核心操作差异**:
    - **翻译时机**: 编译型是执行前（Ahead-of-Time），解释型是执行中（Runtime）。
    - **产物**: 编译型产生目标代码（机器码/字节码），解释型不直接产生持久化的目标代码（或产生临时的内部表示）。
    - **执行方式**: 编译型直接由操作系统/CPU（或虚拟机）执行目标代码，解释型需要解释器参与整个执行过程。
- **必须包含的核心概念**: 编译器、解释器、源代码、目标代码（机器码/字节码）、执行时机。
- **面试官最关注的技术要点**: 对“翻译”和“执行”这两个阶段如何分离或结合的理解，以及由此带来的性能、可移植性、开发效率等方面的差异。

## 知识点详解
### 概念解释
**编译型语言 (Compiled Language)**:
这类语言编写的程序在执行之前，需要一个称为“编译器”的专门程序进行处理。编译器会读取全部源代码，进行词法分析、语法分析、语义分析、优化等步骤，最终将源代码一次性转换成特定平台（如特定CPU架构和操作系统）的机器码，或者是一种中间代码（如Java的字节码）。这个转换后的代码通常保存在一个独立的可执行文件或库文件中。运行时，操作系统直接加载并执行这个机器码文件，或者由一个虚拟机执行中间代码。

**解释型语言 (Interpreted Language)**:
这类语言编写的程序不需要在执行前进行完整的编译过程生成独立的可执行文件。相反，源代码在运行时由一个称为“解释器”的程序逐行或逐块地读取、分析，并立即转换成机器指令（或某种内部表示）来执行。源代码和解释器在程序运行时都必须存在。

### 技术原理 (核心操作差异)

| 特性         | 编译型语言                                     | 解释型语言                                       |
| :----------- | :--------------------------------------------- | :----------------------------------------------- |
| **翻译时机** | **执行前 (Ahead-of-Time, AOT)**：源代码一次性完整翻译。 | **执行中 (Runtime)**：源代码逐行/逐块翻译并执行。  |
| **翻译工具** | 编译器 (Compiler)                              | 解释器 (Interpreter)                             |
| **产物**     | 目标代码 (机器码或中间字节码)，通常是独立文件。   | 通常不产生持久化的目标代码文件（或产生临时内部表示）。 |
| **执行过程** | 1. 编译：源代码 -> 目标代码。<br>2. 执行：操作系统/虚拟机直接运行目标代码。 | 1. 解释与执行：解释器读取源代码 -> 翻译 -> 立即执行。这两个动作交织进行。 |
| **运行时依赖** | 编译后通常不依赖编译器（除非是JIT编译的字节码需要VM）。 | 始终依赖解释器。                                 |
| **错误检测** | 大部分错误在编译阶段发现。                       | 错误通常在运行时才暴露（部分静态分析工具可在运行前发现一些错误）。 |
| **运行效率** | 通常较高，因为已翻译成优化过的机器码或高效字节码。 | 通常较低，因为有运行时翻译的开销。                 |
| **跨平台性** | 较差（若编译为机器码），需为不同平台分别编译。较好（若编译为字节码，如Java）。 | 通常较好，只要目标平台有相应的解释器即可运行同一份源代码。 |
| **开发效率/灵活性** | 编译耗时，修改后需重新编译。                   | 修改代码后可立即运行，调试方便，开发周期短。       |

**核心操作流程对比**:

*   **编译型语言**:
    1.  `源代码` --(编译器)--> `目标代码 (机器码/字节码)`
    2.  `目标代码` --(操作系统/虚拟机)--> `执行结果`
    *核心在于“先完整翻译，后独立执行”。*

*   **解释型语言**:
    1.  `源代码` --(解释器)-->(翻译一行/块 -> 执行一行/块)--> `执行结果`
    *核心在于“边翻译，边执行”。*

## 实际应用
### 使用场景
**编译型语言典型代表及场景**:
-   **C, C++**: 操作系统、游戏引擎、嵌入式系统、高性能计算等对性能要求极高的领域。
-   **Go, Rust**: 后端服务、系统工具、并发编程。
-   **Java, C#** (通常被认为是混合型，但其第一步是编译到字节码): 企业级应用、大型系统、Android应用(Java/Kotlin)。

**解释型语言典型代表及场景**:
-   **Python**: Web后端开发、脚本自动化、数据科学、人工智能、快速原型开发。
-   **JavaScript**: Web前端开发、Node.js后端开发、移动应用 (React Native, Ionic)。
-   **Ruby**: Web开发 (Ruby on Rails)。
-   **PHP**: Web后端开发。
-   **Shell脚本 (Bash, Zsh)**: 系统管理和自动化任务。

### 最佳实践
-   选择编译型语言通常是为了追求极致的运行性能、更早的错误发现和更小的运行时依赖（对于编译到原生机器码的语言）。
-   选择解释型语言通常是为了快速开发、便捷的跨平台性（代码层面）、动态性和灵活性。
-   许多现代语言或其主流实现采用混合策略（如Java、Python的CPython实现编译到字节码，再由虚拟机解释执行，并可能进行JIT编译）以结合两者的优点。

## 进阶思考
-   **混合型语言**: 许多语言（如Java, C#, Python）实际上是混合型的。例如，Java源代码先被编译成平台无关的字节码，然后由Java虚拟机（JVM）解释执行。JVM内部通常还包含JIT（Just-In-Time）编译器，它可以在运行时将频繁执行的字节码编译成本地机器码以提高性能。Python (CPython) 也是先将`.py`文件编译成`.pyc`字节码文件，然后由Python虚拟机解释执行。
-   **JIT (Just-In-Time) 编译**: 这种技术试图结合编译型和解释型语言的优点。代码在运行时被动态地编译成机器码，通常只针对“热点”代码（频繁执行的部分），从而提高执行效率，同时保留解释型语言的部分灵活性。
-   **AOT (Ahead-Of-Time) 编译**: 一些原本是解释型或基于VM的语言也开始支持AOT编译，直接将源代码或字节码编译成本地机器码，以提高启动速度和峰值性能，减少运行时开销。
-   **语言规范 vs. 语言实现**: 严格来说，编译型或解释型是语言的一种实现方式，而不是语言本身的固有属性。例如，C语言通常被编译执行，但也存在C语言的解释器。反之，理论上也可以为Python写一个完整的AOT编译器。我们通常谈论的是该语言最主流或最典型的实现方式。

## 面试实战回答
### 标准回答
"编译型语言和解释型语言，它们最核心的区别在于源代码转换成机器能够执行的指令的**时机和方式**。

**编译型语言**，比如C++或Go，在程序运行之前，会有一个明确的‘编译’步骤。在这个步骤中，‘编译器’这个工具会把我们写的全部源代码一次性地转换成目标平台的机器码（或者是像Java那样的中间字节码），并生成一个可执行文件。之后，我们运行的是这个编译好的文件，CPU可以直接理解并执行这些机器码。所以，它的核心操作是‘**先完整翻译，后独立执行**’。这样做的好处通常是运行效率高，因为代码已经优化并转换成了机器直接认识的指令，而且很多错误能在编译阶段就被发现。

**解释型语言**，比如Python或JavaScript，它们通常不需要这个预先的、完整的编译步骤来生成可执行文件。而是通过一个叫做‘解释器’的程序，在程序运行时，逐行或者逐块地读取源代码，然后实时地把每一句代码翻译成机器指令并立即执行。所以，它的核心操作是‘**边翻译，边执行**’。这种方式的好处是开发效率高，修改代码后能立刻看到结果，调试也相对方便，而且通常具有更好的跨平台性，因为同一份源代码只要在有对应解释器的不同平台上就能运行。

简单总结一下，核心差异就是：编译型是‘一次编译，多次运行（编译产物）’，解释型是‘每次运行，每次解释（源代码）’。当然，现在很多语言比如Java或Python，它们会采用一些混合的策略，比如先编译成字节码，再由虚拟机解释执行，虚拟机内部可能还会有JIT（即时编译）技术来优化性能，这样就能结合两者的部分优点。"
', 'https://www.notion.so/images/page-cover/met_winslow_homer_maine_coast.jpg', '魂', 1233, 45, 1, null, 1, 1, 0, 1, 1, '2025-08-20 13:47:49', '2025-08-20 14:08:01');
INSERT INTO haha.pla_planet_post_article (id, post_id, content, cover_image, tags, word_count, reading_time, is_original, source_url, version, status, is_deleted, created_by, updated_by, created_at, updated_at) VALUES (10, 10, '## 核心要点
- **编译型语言定义**: 源代码在执行前，通过编译器一次性转换成目标机器码（或中间字节码），生成可执行文件或库。
- **解释型语言定义**: 源代码在运行时，通过解释器逐行（或逐块）翻译成机器指令并立即执行，不生成独立的可执行文件。
- **核心操作差异**:
    - **翻译时机**: 编译型是执行前（Ahead-of-Time），解释型是执行中（Runtime）。
    - **产物**: 编译型产生目标代码（机器码/字节码），解释型不直接产生持久化的目标代码（或产生临时的内部表示）。
    - **执行方式**: 编译型直接由操作系统/CPU（或虚拟机）执行目标代码，解释型需要解释器参与整个执行过程。
- **必须包含的核心概念**: 编译器、解释器、源代码、目标代码（机器码/字节码）、执行时机。
- **面试官最关注的技术要点**: 对“翻译”和“执行”这两个阶段如何分离或结合的理解，以及由此带来的性能、可移植性、开发效率等方面的差异。

## 知识点详解
### 概念解释
**编译型语言 (Compiled Language)**:
这类语言编写的程序在执行之前，需要一个称为“编译器”的专门程序进行处理。编译器会读取全部源代码，进行词法分析、语法分析、语义分析、优化等步骤，最终将源代码一次性转换成特定平台（如特定CPU架构和操作系统）的机器码，或者是一种中间代码（如Java的字节码）。这个转换后的代码通常保存在一个独立的可执行文件或库文件中。运行时，操作系统直接加载并执行这个机器码文件，或者由一个虚拟机执行中间代码。

**解释型语言 (Interpreted Language)**:
这类语言编写的程序不需要在执行前进行完整的编译过程生成独立的可执行文件。相反，源代码在运行时由一个称为“解释器”的程序逐行或逐块地读取、分析，并立即转换成机器指令（或某种内部表示）来执行。源代码和解释器在程序运行时都必须存在。

### 技术原理 (核心操作差异)

| 特性         | 编译型语言                                     | 解释型语言                                       |
| :----------- | :--------------------------------------------- | :----------------------------------------------- |
| **翻译时机** | **执行前 (Ahead-of-Time, AOT)**：源代码一次性完整翻译。 | **执行中 (Runtime)**：源代码逐行/逐块翻译并执行。  |
| **翻译工具** | 编译器 (Compiler)                              | 解释器 (Interpreter)                             |
| **产物**     | 目标代码 (机器码或中间字节码)，通常是独立文件。   | 通常不产生持久化的目标代码文件（或产生临时内部表示）。 |
| **执行过程** | 1. 编译：源代码 -> 目标代码。<br>2. 执行：操作系统/虚拟机直接运行目标代码。 | 1. 解释与执行：解释器读取源代码 -> 翻译 -> 立即执行。这两个动作交织进行。 |
| **运行时依赖** | 编译后通常不依赖编译器（除非是JIT编译的字节码需要VM）。 | 始终依赖解释器。                                 |
| **错误检测** | 大部分错误在编译阶段发现。                       | 错误通常在运行时才暴露（部分静态分析工具可在运行前发现一些错误）。 |
| **运行效率** | 通常较高，因为已翻译成优化过的机器码或高效字节码。 | 通常较低，因为有运行时翻译的开销。                 |
| **跨平台性** | 较差（若编译为机器码），需为不同平台分别编译。较好（若编译为字节码，如Java）。 | 通常较好，只要目标平台有相应的解释器即可运行同一份源代码。 |
| **开发效率/灵活性** | 编译耗时，修改后需重新编译。                   | 修改代码后可立即运行，调试方便，开发周期短。       |

**核心操作流程对比**:

*   **编译型语言**:
    1.  `源代码` --(编译器)--> `目标代码 (机器码/字节码)`
    2.  `目标代码` --(操作系统/虚拟机)--> `执行结果`
    *核心在于“先完整翻译，后独立执行”。*

*   **解释型语言**:
    1.  `源代码` --(解释器)-->(翻译一行/块 -> 执行一行/块)--> `执行结果`
    *核心在于“边翻译，边执行”。*

## 实际应用
### 使用场景
**编译型语言典型代表及场景**:
-   **C, C++**: 操作系统、游戏引擎、嵌入式系统、高性能计算等对性能要求极高的领域。
-   **Go, Rust**: 后端服务、系统工具、并发编程。
-   **Java, C#** (通常被认为是混合型，但其第一步是编译到字节码): 企业级应用、大型系统、Android应用(Java/Kotlin)。

**解释型语言典型代表及场景**:
-   **Python**: Web后端开发、脚本自动化、数据科学、人工智能、快速原型开发。
-   **JavaScript**: Web前端开发、Node.js后端开发、移动应用 (React Native, Ionic)。
-   **Ruby**: Web开发 (Ruby on Rails)。
-   **PHP**: Web后端开发。
-   **Shell脚本 (Bash, Zsh)**: 系统管理和自动化任务。

### 最佳实践
-   选择编译型语言通常是为了追求极致的运行性能、更早的错误发现和更小的运行时依赖（对于编译到原生机器码的语言）。
-   选择解释型语言通常是为了快速开发、便捷的跨平台性（代码层面）、动态性和灵活性。
-   许多现代语言或其主流实现采用混合策略（如Java、Python的CPython实现编译到字节码，再由虚拟机解释执行，并可能进行JIT编译）以结合两者的优点。

## 进阶思考
-   **混合型语言**: 许多语言（如Java, C#, Python）实际上是混合型的。例如，Java源代码先被编译成平台无关的字节码，然后由Java虚拟机（JVM）解释执行。JVM内部通常还包含JIT（Just-In-Time）编译器，它可以在运行时将频繁执行的字节码编译成本地机器码以提高性能。Python (CPython) 也是先将`.py`文件编译成`.pyc`字节码文件，然后由Python虚拟机解释执行。
-   **JIT (Just-In-Time) 编译**: 这种技术试图结合编译型和解释型语言的优点。代码在运行时被动态地编译成机器码，通常只针对“热点”代码（频繁执行的部分），从而提高执行效率，同时保留解释型语言的部分灵活性。
-   **AOT (Ahead-Of-Time) 编译**: 一些原本是解释型或基于VM的语言也开始支持AOT编译，直接将源代码或字节码编译成本地机器码，以提高启动速度和峰值性能，减少运行时开销。
-   **语言规范 vs. 语言实现**: 严格来说，编译型或解释型是语言的一种实现方式，而不是语言本身的固有属性。例如，C语言通常被编译执行，但也存在C语言的解释器。反之，理论上也可以为Python写一个完整的AOT编译器。我们通常谈论的是该语言最主流或最典型的实现方式。

## 面试实战回答
### 标准回答
"编译型语言和解释型语言，它们最核心的区别在于源代码转换成机器能够执行的指令的**时机和方式**。

**编译型语言**，比如C++或Go，在程序运行之前，会有一个明确的‘编译’步骤。在这个步骤中，‘编译器’这个工具会把我们写的全部源代码一次性地转换成目标平台的机器码（或者是像Java那样的中间字节码），并生成一个可执行文件。之后，我们运行的是这个编译好的文件，CPU可以直接理解并执行这些机器码。所以，它的核心操作是‘**先完整翻译，后独立执行**’。这样做的好处通常是运行效率高，因为代码已经优化并转换成了机器直接认识的指令，而且很多错误能在编译阶段就被发现。

**解释型语言**，比如Python或JavaScript，它们通常不需要这个预先的、完整的编译步骤来生成可执行文件。而是通过一个叫做‘解释器’的程序，在程序运行时，逐行或者逐块地读取源代码，然后实时地把每一句代码翻译成机器指令并立即执行。所以，它的核心操作是‘**边翻译，边执行**’。这种方式的好处是开发效率高，修改代码后能立刻看到结果，调试也相对方便，而且通常具有更好的跨平台性，因为同一份源代码只要在有对应解释器的不同平台上就能运行。

简单总结一下，核心差异就是：编译型是‘一次编译，多次运行（编译产物）’，解释型是‘每次运行，每次解释（源代码）’。当然，现在很多语言比如Java或Python，它们会采用一些混合的策略，比如先编译成字节码，再由虚拟机解释执行，虚拟机内部可能还会有JIT（即时编译）技术来优化性能，这样就能结合两者的部分优点。"
', 'https://www.notion.so/images/page-cover/met_winslow_homer_maine_coast.jpg', '魂', 1233, 45, 1, null, 1, 1, 0, 1, 1, '2025-08-20 13:47:49', '2025-08-20 14:08:01');



-- 星球画廊表初始数据
-- 插入画廊图片数据

-- NASA分类图片
INSERT INTO `pla_planet_gallery` (`user_id`, `file_name`, `file_url`, `file_size`, `file_type`, `width`, `height`, `thumbnail_url`, `description`, `category`, `year`, `author`, `sort_order`) VALUES
(1, 'nasa_bruce_mccandless_spacewalk.jpg', '/gallery/NASA/nasa_bruce_mccandless_spacewalk.jpg', 0, 'image', 0, 0, NULL, 'Bruce McCandless太空行走', 'NASA', NULL, 'NASA', 1),
(1, 'nasa_carina_nebula.jpg', '/gallery/NASA/nasa_carina_nebula.jpg', 0, 'image', 0, 0, NULL, '船底座星云', 'NASA', NULL, 'NASA', 2),
(1, 'nasa_earth_grid.jpg', '/gallery/NASA/nasa_earth_grid.jpg', 0, 'image', 0, 0, NULL, '地球网格图', 'NASA', NULL, 'NASA', 3),
(1, 'nasa_new_york_city_grid.jpg', '/gallery/NASA/nasa_new_york_city_grid.jpg', 0, 'image', 0, 0, NULL, '纽约城市网格', 'NASA', NULL, 'NASA', 4),
(1, 'nasa_orion_nebula.jpg', '/gallery/NASA/nasa_orion_nebula.jpg', 0, 'image', 0, 0, NULL, '猎户座星云', 'NASA', NULL, 'NASA', 5),
(1, 'nasa_reduced_gravity_walking_simulator.jpg', '/gallery/NASA/nasa_reduced_gravity_walking_simulator.jpg', 0, 'image', 0, 0, NULL, '减重力行走模拟器', 'NASA', NULL, 'NASA', 6),
(1, 'nasa_robert_stewart_spacewalk.jpg', '/gallery/NASA/nasa_robert_stewart_spacewalk.jpg', 0, 'image', 0, 0, NULL, 'Robert Stewart太空行走', 'NASA', NULL, 'NASA', 7),
(1, 'nasa_robert_stewart_spacewalk_2.jpg', '/gallery/NASA/nasa_robert_stewart_spacewalk_2.jpg', 0, 'image', 0, 0, NULL, 'Robert Stewart太空行走2', 'NASA', NULL, 'NASA', 8),
(1, 'nasa_space_shuttle_columbia_and_sunrise.jpg', '/gallery/NASA/nasa_space_shuttle_columbia_and_sunrise.jpg', 0, 'image', 0, 0, NULL, '哥伦比亚号航天飞机与日出', 'NASA', NULL, 'NASA', 9),
(1, 'nasa_the_blue_marble.jpg', '/gallery/NASA/nasa_the_blue_marble.jpg', 0, 'image', 0, 0, NULL, '蓝色弹珠', 'NASA', NULL, 'NASA', 10);

-- 大都会艺术博物馆分类图片
INSERT INTO `pla_planet_gallery` (`user_id`, `file_name`, `file_url`, `file_size`, `file_type`, `width`, `height`, `thumbnail_url`, `description`, `category`, `year`, `author`, `sort_order`) VALUES
(1, 'met_canaletto_1720.jpg', '/gallery/大都会艺术博物馆/met_canaletto_1720.jpg', 0, 'image', 0, 0, NULL, 'Canaletto作品', '大都会艺术博物馆', 1720, 'Canaletto', 1),
(1, 'met_cezanne_1890.jpg', '/gallery/大都会艺术博物馆/met_cezanne_1890.jpg', 0, 'image', 0, 0, NULL, 'Cézanne作品', '大都会艺术博物馆', 1890, 'Paul Cézanne', 2),
(1, 'met_frederic_edwin_church_1871.jpg', '/gallery/大都会艺术博物馆/met_frederic_edwin_church_1871.jpg', 0, 'image', 0, 0, NULL, 'Frederic Edwin Church作品', '大都会艺术博物馆', 1871, 'Frederic Edwin Church', 3),
(1, 'met_henri_tl_1892.jpg', '/gallery/大都会艺术博物馆/met_henri_tl_1892.jpg', 0, 'image', 0, 0, NULL, 'Henri作品', '大都会艺术博物馆', 1892, 'Henri', 4),
(1, 'met_joseph_hidley_1870.jpg', '/gallery/大都会艺术博物馆/met_joseph_hidley_1870.jpg', 0, 'image', 0, 0, NULL, 'Joseph Hidley作品', '大都会艺术博物馆', 1870, 'Joseph Hidley', 5),
(1, 'met_vincent_van_gogh_oleanders.jpg', '/gallery/大都会艺术博物馆/met_vincent_van_gogh_oleanders.jpg', 0, 'image', 0, 0, NULL, '梵高夹竹桃', '大都会艺术博物馆', NULL, 'Vincent van Gogh', 6),
(1, 'met_winslow_homer_maine_coast.jpg', '/gallery/大都会艺术博物馆/met_winslow_homer_maine_coast.jpg', 0, 'image', 0, 0, NULL, 'Winslow Homer缅因海岸', '大都会艺术博物馆', NULL, 'Winslow Homer', 7);

-- 大都会艺术博物馆-图案分类图片
INSERT INTO `pla_planet_gallery` (`user_id`, `file_name`, `file_url`, `file_size`, `file_type`, `width`, `height`, `thumbnail_url`, `description`, `category`, `year`, `author`, `sort_order`) VALUES
(1, 'met_william_morris_1875.jpg', '/gallery/大都会艺术博物馆-图案/met_william_morris_1875.jpg', 0, 'image', 0, 0, NULL, 'William Morris图案设计', '大都会艺术博物馆-图案', 1875, 'William Morris', 1),
(1, 'met_william_morris_1877_willow.jpg', '/gallery/大都会艺术博物馆-图案/met_william_morris_1877_willow.jpg', 0, 'image', 0, 0, NULL, 'William Morris柳树图案', '大都会艺术博物馆-图案', 1877, 'William Morris', 2),
(1, 'met_william_morris_1878.jpg', '/gallery/大都会艺术博物馆-图案/met_william_morris_1878.jpg', 0, 'image', 0, 0, NULL, 'William Morris图案设计', '大都会艺术博物馆-图案', 1878, 'William Morris', 3);

-- 宇宙分类图片
INSERT INTO `pla_planet_gallery` (`user_id`, `file_name`, `file_url`, `file_size`, `file_type`, `width`, `height`, `thumbnail_url`, `description`, `category`, `year`, `author`, `sort_order`) VALUES
(1, 'greg-rakozy-0LU4vO5iFpM-unsplash.jpg', '/gallery/宇宙/greg-rakozy-0LU4vO5iFpM-unsplash.jpg', 0, 'image', 0, 0, NULL, '宇宙星空', '宇宙', NULL, 'Greg Rakozy', 1),
(1, 'jeremy-thomas-4dpAqfTbvKA-unsplash.jpg', '/gallery/宇宙/jeremy-thomas-4dpAqfTbvKA-unsplash.jpg', 0, 'image', 0, 0, NULL, '宇宙星空', '宇宙', NULL, 'Jeremy Thomas', 2),
(1, 'jeremy-thomas-E0AHdsENmDg-unsplash.jpg', '/gallery/宇宙/jeremy-thomas-E0AHdsENmDg-unsplash.jpg', 0, 'image', 0, 0, NULL, '宇宙星空', '宇宙', NULL, 'Jeremy Thomas', 3),
(1, 'nasa-OVO8nK-7Rfs-unsplash.jpg', '/gallery/宇宙/nasa-OVO8nK-7Rfs-unsplash.jpg', 0, 'image', 0, 0, NULL, 'NASA宇宙图片', '宇宙', NULL, 'NASA', 4),
(1, 'nasa-Q1p7bh3SHj8-unsplash.jpg', '/gallery/宇宙/nasa-Q1p7bh3SHj8-unsplash.jpg', 0, 'image', 0, 0, NULL, 'NASA宇宙图片', '宇宙', NULL, 'NASA', 5),
(1, 'pedro-j-conesa-EGGGADpdT38-unsplash.jpg', '/gallery/宇宙/pedro-j-conesa-EGGGADpdT38-unsplash.jpg', 0, 'image', 0, 0, NULL, '宇宙星空', '宇宙', NULL, 'Pedro J Conesa', 6),
(1, 'shot-by-cerqueira-0o_GEzyargo-unsplash.jpg', '/gallery/宇宙/shot-by-cerqueira-0o_GEzyargo-unsplash.jpg', 0, 'image', 0, 0, NULL, '宇宙星空', '宇宙', NULL, 'Shot by Cerqueira', 7);

-- 蒸汽波分类图片
INSERT INTO `pla_planet_gallery` (`user_id`, `file_name`, `file_url`, `file_size`, `file_type`, `width`, `height`, `thumbnail_url`, `description`, `category`, `year`, `author`, `sort_order`) VALUES
(1, 'adrian-newell-_wlpsopoo-k-unsplash.jpg', '/gallery/蒸汽波/adrian-newell-_wlpsopoo-k-unsplash.jpg', 0, 'image', 0, 0, NULL, '蒸汽波风格', '蒸汽波', NULL, 'Adrian Newell', 1),
(1, 'IMG_8351.JPG', '/gallery/蒸汽波/IMG_8351.JPG', 0, 'image', 0, 0, NULL, '蒸汽波风格图片', '蒸汽波', NULL, NULL, 2),
(1, 'IMG_8352.JPG', '/gallery/蒸汽波/IMG_8352.JPG', 0, 'image', 0, 0, NULL, '蒸汽波风格图片', '蒸汽波', NULL, NULL, 3),
(1, 'IMG_8353.JPG', '/gallery/蒸汽波/IMG_8353.JPG', 0, 'image', 0, 0, NULL, '蒸汽波风格图片', '蒸汽波', NULL, NULL, 4),
(1, 'IMG_8354.JPG', '/gallery/蒸汽波/IMG_8354.JPG', 0, 'image', 0, 0, NULL, '蒸汽波风格图片', '蒸汽波', NULL, NULL, 5),
(1, 'IMG_8355.JPG', '/gallery/蒸汽波/IMG_8355.JPG', 0, 'image', 0, 0, NULL, '蒸汽波风格图片', '蒸汽波', NULL, NULL, 6),
(1, 'neeqolah-creative-works-Tn5gnXGI3hI-unsplash.jpg', '/gallery/蒸汽波/neeqolah-creative-works-Tn5gnXGI3hI-unsplash.jpg', 0, 'image', 0, 0, NULL, '蒸汽波创意作品', '蒸汽波', NULL, 'Neeqolah Creative Works', 7),
(1, 'sonder-quest-VE9pIb8QNQ4-unsplash.jpg', '/gallery/蒸汽波/sonder-quest-VE9pIb8QNQ4-unsplash.jpg', 0, 'image', 0, 0, NULL, '蒸汽波风格', '蒸汽波', NULL, 'Sonder Quest', 8);

-- 詹姆斯·韦布空间望远镜分类图片
INSERT INTO `pla_planet_gallery` (`user_id`, `file_name`, `file_url`, `file_size`, `file_type`, `width`, `height`, `thumbnail_url`, `description`, `category`, `year`, `author`, `sort_order`) VALUES
(1, 'webb1.jpg', '/gallery/詹姆斯·韦布空间望远镜/webb1.jpg', 0, 'image', 0, 0, NULL, '韦布望远镜图片1', '詹姆斯·韦布空间望远镜', NULL, 'NASA/ESA/CSA', 1),
(1, 'webb2.jpg', '/gallery/詹姆斯·韦布空间望远镜/webb2.jpg', 0, 'image', 0, 0, NULL, '韦布望远镜图片2', '詹姆斯·韦布空间望远镜', NULL, 'NASA/ESA/CSA', 2),
(1, 'webb3.jpg', '/gallery/詹姆斯·韦布空间望远镜/webb3.jpg', 0, 'image', 0, 0, NULL, '韦布望远镜图片3', '詹姆斯·韦布空间望远镜', NULL, 'NASA/ESA/CSA', 3),
(1, 'webb4.jpg', '/gallery/詹姆斯·韦布空间望远镜/webb4.jpg', 0, 'image', 0, 0, NULL, '韦布望远镜图片4', '詹姆斯·韦布空间望远镜', NULL, 'NASA/ESA/CSA', 4);

-- 计算机分类图片
INSERT INTO `pla_planet_gallery` (`user_id`, `file_name`, `file_url`, `file_size`, `file_type`, `width`, `height`, `thumbnail_url`, `description`, `category`, `year`, `author`, `sort_order`) VALUES
(1, 'alan-w-AP7tG4LTeXA-unsplash.jpg', '/gallery/计算机/alan-w-AP7tG4LTeXA-unsplash.jpg', 0, 'image', 0, 0, NULL, '计算机相关图片', '计算机', NULL, 'Alan W', 1),
(1, 'marissa-lewis-PoL7eR-p4Z0-unsplash.jpg', '/gallery/计算机/marissa-lewis-PoL7eR-p4Z0-unsplash.jpg', 0, 'image', 0, 0, NULL, '计算机相关图片', '计算机', NULL, 'Marissa Lewis', 2),
(1, 'marissa-lewis-UsIlyGTLcTQ-unsplash.jpg', '/gallery/计算机/marissa-lewis-UsIlyGTLcTQ-unsplash.jpg', 0, 'image', 0, 0, NULL, '计算机相关图片', '计算机', NULL, 'Marissa Lewis', 3),
(1, 'p-l-8bnc0-fl_NQ-unsplash.jpg', '/gallery/计算机/p-l-8bnc0-fl_NQ-unsplash.jpg', 0, 'image', 0, 0, NULL, '计算机相关图片', '计算机', NULL, 'P L', 4),
(1, 'pramod-tiwari-rjXukZYsO_0-unsplash.jpg', '/gallery/计算机/pramod-tiwari-rjXukZYsO_0-unsplash.jpg', 0, 'image', 0, 0, NULL, '计算机相关图片', '计算机', NULL, 'Pramod Tiwari', 5),
(1, 'theo-QZePhoGqD7w-unsplash.jpg', '/gallery/计算机/theo-QZePhoGqD7w-unsplash.jpg', 0, 'image', 0, 0, NULL, '计算机相关图片', '计算机', NULL, 'Theo', 6);

-- 颜色和渐变分类图片
INSERT INTO `pla_planet_gallery` (`user_id`, `file_name`, `file_url`, `file_size`, `file_type`, `width`, `height`, `thumbnail_url`, `description`, `category`, `year`, `author`, `sort_order`) VALUES
(1, 'gradients_10.jpg', '/gallery/颜色和渐变/gradients_10.jpg', 0, 'image', 0, 0, NULL, '渐变色彩10', '颜色和渐变', NULL, NULL, 1),
(1, 'gradients_11.jpg', '/gallery/颜色和渐变/gradients_11.jpg', 0, 'image', 0, 0, NULL, '渐变色彩11', '颜色和渐变', NULL, NULL, 2),
(1, 'gradients_2.png', '/gallery/颜色和渐变/gradients_2.png', 0, 'image', 0, 0, NULL, '渐变色彩2', '颜色和渐变', NULL, NULL, 3),
(1, 'gradients_3.png', '/gallery/颜色和渐变/gradients_3.png', 0, 'image', 0, 0, NULL, '渐变色彩3', '颜色和渐变', NULL, NULL, 4),
(1, 'gradients_5.png', '/gallery/颜色和渐变/gradients_5.png', 0, 'image', 0, 0, NULL, '渐变色彩5', '颜色和渐变', NULL, NULL, 5),
(1, 'gradients_8.png', '/gallery/颜色和渐变/gradients_8.png', 0, 'image', 0, 0, NULL, '渐变色彩8', '颜色和渐变', NULL, NULL, 6),
(1, 'solid_beige.png', '/gallery/颜色和渐变/solid_beige.png', 0, 'image', 0, 0, NULL, '米色纯色', '颜色和渐变', NULL, NULL, 7),
(1, 'solid_blue.png', '/gallery/颜色和渐变/solid_blue.png', 0, 'image', 0, 0, NULL, '蓝色纯色', '颜色和渐变', NULL, NULL, 8),
(1, 'solid_red.png', '/gallery/颜色和渐变/solid_red.png', 0, 'image', 0, 0, NULL, '红色纯色', '颜色和渐变', NULL, NULL, 9),
(1, 'solid_yellow.png', '/gallery/颜色和渐变/solid_yellow.png', 0, 'image', 0, 0, NULL, '黄色纯色', '颜色和渐变', NULL, NULL, 10);